{
    "abi": [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "initialAuthed",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "wat_",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ],
            "stateMutability": "payable"
        },
        {
            "type": "receive",
            "stateMutability": "payable"
        },
        {
            "type": "function",
            "name": "authed",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "authed",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address[]",
                    "internalType": "address[]"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "bar",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "bud",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "challengeReward",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "constructOpPokeMessage",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "constructPokeMessage",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "decimals",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "deny",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "diss",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "drop",
            "inputs": [
                {
                    "name": "feedIds",
                    "type": "uint8[]",
                    "internalType": "uint8[]"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "drop",
            "inputs": [
                {
                    "name": "feedId",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "feedRegistrationMessage",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "feeds",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "feeds",
            "inputs": [
                {
                    "name": "feedId",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                },
                {
                    "name": "",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "feeds",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address[]",
                    "internalType": "address[]"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "isAcceptableSchnorrSignatureNow",
            "inputs": [
                {
                    "name": "message",
                    "type": "bytes32",
                    "internalType": "bytes32"
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "kiss",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "latestAnswer",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "int256",
                    "internalType": "int256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "latestRoundData",
            "inputs": [],
            "outputs": [
                {
                    "name": "roundId",
                    "type": "uint80",
                    "internalType": "uint80"
                },
                {
                    "name": "answer",
                    "type": "int256",
                    "internalType": "int256"
                },
                {
                    "name": "startedAt",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "updatedAt",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "answeredInRound",
                    "type": "uint80",
                    "internalType": "uint80"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "lift",
            "inputs": [
                {
                    "name": "pubKey",
                    "type": "tuple",
                    "internalType": "struct LibSecp256k1.Point",
                    "components": [
                        {
                            "name": "x",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "y",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ]
                },
                {
                    "name": "ecdsaData",
                    "type": "tuple",
                    "internalType": "struct IScribe.ECDSAData",
                    "components": [
                        {
                            "name": "v",
                            "type": "uint8",
                            "internalType": "uint8"
                        },
                        {
                            "name": "r",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "s",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "lift",
            "inputs": [
                {
                    "name": "pubKeys",
                    "type": "tuple[]",
                    "internalType": "struct LibSecp256k1.Point[]",
                    "components": [
                        {
                            "name": "x",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "y",
                            "type": "uint256",
                            "internalType": "uint256"
                        }
                    ]
                },
                {
                    "name": "ecdsaDatas",
                    "type": "tuple[]",
                    "internalType": "struct IScribe.ECDSAData[]",
                    "components": [
                        {
                            "name": "v",
                            "type": "uint8",
                            "internalType": "uint8"
                        },
                        {
                            "name": "r",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "s",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8[]",
                    "internalType": "uint8[]"
                }
            ],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "maxChallengeReward",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "opChallenge",
            "inputs": [
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "opChallengePeriod",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint16",
                    "internalType": "uint16"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "opFeedId",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "opPoke",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                },
                {
                    "name": "ecdsaData",
                    "type": "tuple",
                    "internalType": "struct IScribe.ECDSAData",
                    "components": [
                        {
                            "name": "v",
                            "type": "uint8",
                            "internalType": "uint8"
                        },
                        {
                            "name": "r",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "s",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "opPoke_optimized_397084999",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                },
                {
                    "name": "ecdsaData",
                    "type": "tuple",
                    "internalType": "struct IScribe.ECDSAData",
                    "components": [
                        {
                            "name": "v",
                            "type": "uint8",
                            "internalType": "uint8"
                        },
                        {
                            "name": "r",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "s",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "payable"
        },
        {
            "type": "function",
            "name": "peek",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "peep",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "poke",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "poke_optimized_7136211",
            "inputs": [
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "read",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "readWithAge",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "rely",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setBar",
            "inputs": [
                {
                    "name": "bar_",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setMaxChallengeReward",
            "inputs": [
                {
                    "name": "maxChallengeReward_",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setOpChallengePeriod",
            "inputs": [
                {
                    "name": "opChallengePeriod_",
                    "type": "uint16",
                    "internalType": "uint16"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "tolled",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "tolled",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address[]",
                    "internalType": "address[]"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "tryRead",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                },
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "tryReadWithAge",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "bool",
                    "internalType": "bool"
                },
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "wards",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "wat",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "event",
            "name": "AuthGranted",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "who",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "AuthRenounced",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "who",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "BarUpdated",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "oldBar",
                    "type": "uint8",
                    "indexed": false,
                    "internalType": "uint8"
                },
                {
                    "name": "newBar",
                    "type": "uint8",
                    "indexed": false,
                    "internalType": "uint8"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "FeedDropped",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "feed",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "FeedLifted",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "feed",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "MaxChallengeRewardUpdated",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "oldMaxChallengeReward",
                    "type": "uint256",
                    "indexed": false,
                    "internalType": "uint256"
                },
                {
                    "name": "newMaxChallengeReward",
                    "type": "uint256",
                    "indexed": false,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpChallengePeriodUpdated",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "oldOpChallengePeriod",
                    "type": "uint16",
                    "indexed": false,
                    "internalType": "uint16"
                },
                {
                    "name": "newOpChallengePeriod",
                    "type": "uint16",
                    "indexed": false,
                    "internalType": "uint16"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpChallengeRewardPaid",
            "inputs": [
                {
                    "name": "challenger",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                },
                {
                    "name": "reward",
                    "type": "uint256",
                    "indexed": false,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpPokeChallengedSuccessfully",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                },
                {
                    "name": "schnorrErr",
                    "type": "bytes",
                    "indexed": false,
                    "internalType": "bytes"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpPokeChallengedUnsuccessfully",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpPokeDataDropped",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "OpPoked",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "opFeed",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "schnorrData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.SchnorrData",
                    "components": [
                        {
                            "name": "signature",
                            "type": "bytes32",
                            "internalType": "bytes32"
                        },
                        {
                            "name": "commitment",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "feedIds",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                },
                {
                    "name": "pokeData",
                    "type": "tuple",
                    "indexed": false,
                    "internalType": "struct IScribe.PokeData",
                    "components": [
                        {
                            "name": "val",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "age",
                            "type": "uint32",
                            "internalType": "uint32"
                        }
                    ]
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "Poked",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "val",
                    "type": "uint128",
                    "indexed": false,
                    "internalType": "uint128"
                },
                {
                    "name": "age",
                    "type": "uint32",
                    "indexed": false,
                    "internalType": "uint32"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "TollGranted",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "who",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "TollRenounced",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "who",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "error",
            "name": "BarNotReached",
            "inputs": [
                {
                    "name": "numberSigners",
                    "type": "uint8",
                    "internalType": "uint8"
                },
                {
                    "name": "bar",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ]
        },
        {
            "type": "error",
            "name": "DoubleSigningAttempted",
            "inputs": [
                {
                    "name": "feedId",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ]
        },
        {
            "type": "error",
            "name": "FutureMessage",
            "inputs": [
                {
                    "name": "givenAge",
                    "type": "uint32",
                    "internalType": "uint32"
                },
                {
                    "name": "currentTimestamp",
                    "type": "uint32",
                    "internalType": "uint32"
                }
            ]
        },
        {
            "type": "error",
            "name": "InChallengePeriod",
            "inputs": []
        },
        {
            "type": "error",
            "name": "InvalidFeedId",
            "inputs": [
                {
                    "name": "feedId",
                    "type": "uint8",
                    "internalType": "uint8"
                }
            ]
        },
        {
            "type": "error",
            "name": "NoOpPokeToChallenge",
            "inputs": []
        },
        {
            "type": "error",
            "name": "NotAuthorized",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "NotTolled",
            "inputs": [
                {
                    "name": "caller",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "SchnorrDataMismatch",
            "inputs": [
                {
                    "name": "gotHash",
                    "type": "uint160",
                    "internalType": "uint160"
                },
                {
                    "name": "wantHash",
                    "type": "uint160",
                    "internalType": "uint160"
                }
            ]
        },
        {
            "type": "error",
            "name": "SchnorrSignatureInvalid",
            "inputs": []
        },
        {
            "type": "error",
            "name": "SignerNotFeed",
            "inputs": [
                {
                    "name": "signer",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "StaleMessage",
            "inputs": [
                {
                    "name": "givenAge",
                    "type": "uint32",
                    "internalType": "uint32"
                },
                {
                    "name": "currentAge",
                    "type": "uint32",
                    "internalType": "uint32"
                }
            ]
        }
    ],
    "bytecode": {
        "object": "0x620037a560a0601f38839003908101601f19168201906001600160401b03821183831017620002465780839160409586948552833981010312620002415780516001600160a01b0381169081900362000241576020809201516000828152808452600185822055600154680100000000000000008110156200022d5760018101806001558110156200021957600182528482200180546001600160a01b03191684179055845192817fe31c10b0adbedd0c6e5d024286c6eeead7761e65a67608dcf0b67604c0da7e2f8186a3811562000216575060805261020590815460ff81169160028303620001d7575b505050620000f86200025c565b805461ffff8160081c16906104b09182810362000191575b505050506200011e6200025c565b6102078054600019926001820162000157575b845161340890816200039d8239608051818181611714015281816125d90152612ec90152f35b839085519283528201527ffccefdc521d919e1c7e09025203c5542ec6e99eb409c750d4fc386cdb7feee37843392a2553880808062000131565b6204b000928651918252858201527f06eaf85dccf95ffb2040720d23d296ebf45c6b193a5f373a553300fa640a1118863392a262ffff0019161790553880808062000110565b600292815282858201527f95623b9931156d6d5cb43881a13f223ae416fb199e5edf776efb38766f38cbea863392a260ff1916178155388080620000eb565b80fd5b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b303b156200039a57604080519081016001600160401b03811182821017620002465760405261020680546001600160801b03808216845260809190911c63ffffffff908116602085018181526102055460081c61ffff16909101949282861162000384576000958380421691161180158062000370575b62000345575b62000306575b505050919055506004805463ffffffff60801b19164260801b63ffffffff60801b16179055565b6040519351168352511660208201527f20246a67cf0cfc89415e0ea0b3293fcc5138acc3c3b2111012dd06eb742b899460403392a238808080620002df565b818551166004549063ffffffff60801b855160801b169160018060a01b0319161717600455620002d9565b50838351168460045460801c1610620002d3565b634e487b7160e01b600052601160045260246000fd5b56fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908115611ab757508060821461189b5780630760861b14611a045780630e5a6c70146115ef5780630fce3415146119ba57806310b07b7114611969578063224242ca146118a95780632f529d731461189b5780632fba4aa914611818578063313ce567146117fc578063393e5ede1461179c5780633bee58f9146117525780633ea0c15e146117375780634ca29923146116fc5780634fce7a2a146116b557806350d25bcd1461166b57806357de26a41461161a57806359e02dd7146115ef578063646edb68146115c957806365c4ce7a146115a857806365fae35e146115725780636712af9e14611068578063789d819114610fc65780638928a1f814610c145780638b0b044c14610bfb5780639954b0dc14610b465780639c52a7f114610b105780639dadc88614610a4d5780639fd001f614610a2e578063ab06ee16146109c3578063acf40b6f14610968578063b259da5c1461088f578063b9ee3fc11461086a578063bf353dbb14610823578063bfe5861f14610602578063c83c6334146105cb578063ceed3ef214610544578063d0a5882a14610521578063d63605b8146103ea578063dac42ad81461039d578063f29c29c41461037c578063fe663495146102b0578063feaf968c1461022e5763febb0f7e14610207575b3861000f565b3461022957600060031936011261022957602060ff6102055416604051908152f35b600080fd5b34610229576000600319360112610229573360005260026020526040600020541561029e5760a061025d612f5b565b63ffffffff60206fffffffffffffffffffffffffffffffff835116920151166040519160018352602083015260006040830152606082015260016080820152f35b63d957b595600052336020526024601cfd5b34610229576020600319360112610229576102c96120d9565b3360005260006020526040600020541561036a5760ff811680156102295761020591825460ff8116838103610301575b61001b613091565b6040805160ff92831681529390911660208401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009233917f95623b9931156d6d5cb43881a13f223ae416fb199e5edf776efb38766f38cbea91a21617905580808080806102f9565b634a0bfec1600052336020526024601cfd5b346102295760206003193601126102295761001b6103986120f7565b61244c565b3461022957600319604081360112610229576024359067ffffffffffffffff8211610229576060908236030112610229576103df602091600401600435612708565b506040519015158152f35b3461022957600060031936011261022957604051612020810181811067ffffffffffffffff8211176104f25760405261010090818152602061200036828401376000816040516104398161207e565b828152015260009060005b848110610460578284526040518061045c868261211a565b0390f35b8460ff821610156104c3576001906104806101fe82841b166005016126c9565b80518482015117610493575b5001610444565b9373ffffffffffffffffffffffffffffffffffffffff604084939620166104ba8288612438565b5201928661048c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3461022957600060031936011261022957602061053c6121b1565b604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e576060610573612f5b565b80516fffffffffffffffffffffffffffffffff9081169182156105b8579063ffffffff60208193015116906001935b6040519415158552166020840152166040820152f35b506000915063ffffffff908290816105a2565b34610229576020600319360112610229576105e46120d9565b3360005260006020526040600020541561036a5761001b9033613001565b346102295760406003193601126102295767ffffffffffffffff600435818111610229573660238201121561022957806004013561063f81612199565b9061064d60405192836120b6565b808252602092838301906024809360061b82010190368211610229578301915b8183106107f3575050508035938411610229573660238501121561022957836004013561069981612199565b946106a760405196876120b6565b81865284860183606080940283010191368311610229578401905b8282106107b357505050503360005260008352604060002054156107a45750805190835182036102295761070e6106f883612199565b9261070660405194856120b6565b808452612199565b92601f19818401940136853760005b825181101561075e578061074861073660019386612438565b51610741838a612438565b5190612b38565b60ff6107548388612438565b911690520161071d565b508284604051928392818401908285525180915260408401929160005b82811061078a57505050500390f35b835160ff168552869550938101939281019260010161077b565b634a0bfec1600052338352601cfd5b8382360312610229578684916040516107cb8161209a565b6107d4856120e9565b81528285013583820152604085013560408201528152019101906106c2565b6040833603126102295785604091825161080c8161207e565b85358152828601358382015281520192019161066d565b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6108516120f7565b1660005260006020526020604060002054604051908152f35b3461022957600060031936011261022957602060ff6102055460181c16604051908152f35b34610229576020806003193601126102295760043567ffffffffffffffff81116102295736602382011215610229578060040135906108cd82612199565b916108db60405193846120b6565b80835260248484019160051b8301019136831161022957602401905b828210610951578385336000526000815260406000205415610940575060005b815181101561001b578061093a60ff61093260019486612438565b511633613001565b01610917565b634a0bfec16000523390526024601cfd5b84809161095d846120e9565b8152019101906108f7565b34610229576040600319360112610229576040516109858161207e565b6004356fffffffffffffffffffffffffffffffff8116810361022957815260243563ffffffff81168103610229578161053c91602080940152612585565b34610229576020600319360112610229576004353360005260006020526040600020541561036a5761020780548281036109f957005b6040519081528260208201527ffccefdc521d919e1c7e09025203c5542ec6e99eb409c750d4fc386cdb7feee3760403392a255005b3461022957600060031936011261022957602061020754604051908152f35b346102295760206003193601126102295760043561ffff80821691828103610229573360005260006020526040600020541561036a57821561022957610205928354928360081c1691818303610aa55761001b613091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff9262ffff009260405191825260208201527f06eaf85dccf95ffb2040720d23d296ebf45c6b193a5f373a553300fa640a111860403392a260081b16911617905580808080806102f9565b3461022957602060031936011261022957610b296120f7565b3360005260006020526040600020541561036a5761001b9061234f565b34610229576000600319360112610229576003610b6381546123ab565b9060009160005b8151811015610bea5780610b80610bbb9261224c565b9073ffffffffffffffffffffffffffffffffffffffff9182915490871b1c166000526002602052600160406000205414610bc0575b506123dc565b610b6a565b610bc98261224c565b905490861b1c16610be3610bdc876123dc565b9685612438565b5285610bb5565b8382526040518061045c848261211a565b3461022957602061053c610c0e36611ee8565b90612e1c565b3461022957602060031981813601126102295767ffffffffffffffff906004358281116102295760608160040192823603011261022957610c53612ce5565b84810163ffffffff928382511695610c77610205549761ffff8960081c1690612d1b565b8580421691161115610f9c57610c9c6044610c94602485016126e7565b930187612678565b9290610cb36040519485928c8401948b3586612d33565b0392610cc7601f19948581018352826120b6565b51902073ffffffffffffffffffffffffffffffffffffffff90811690888a1c16808203610f65575050610d2f86610d2a6fffffffffffffffffffffffffffffffff8097511660405190610d198261207e565b8152888b60c01c168c820152612585565b612708565b91909788600014610e365750505050829051168260045460801c1610610d95575b50507f3f2cf79ad39c64280638c6fc485670c10ed4dad0a35ecd2857255ee7a130ba2060405184815280610d88339487830190612d74565b0390a25b60405190158152f35b610e2e600092610de2610206938454166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b825460801c167fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000006004549260801b16911617600455565b558380610d50565b90935060ff919550610e50929796945060181c1630613001565b610e586131eb565b906000808060405185335af1903d15610f5f573d9081116104f25760405190610e888989601f84011601836120b6565b81526000883d92013e5b610f19575b5084610eae60405192604084526040840190612d74565b948286038284015283519384875260005b858110610f06575050858391600084877f2984f6d7ff4df266745fc0283d83a02c5125069524c8eeb85887de137e8f890c98999a010152601f3397011601030190a2610d8c565b8181018401518882018501528301610ebf565b7f7e4d8c9da9421f78d986605928e77f0920f2c995d1cbba819c8915d2b209aa4b60405160408152610f4e6040820185612d74565b92888201528033930390a285610e97565b50610e92565b60449250604051917f73ceee3000000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b60046040517fcff75876000000000000000000000000000000000000000000000000000000008152fd5b3461022957602060031936011261022957610fdf6120d9565b6101008110156104c357610ff89060011b6005016126c9565b805160208201511761103057506040600073ffffffffffffffffffffffffffffffffffffffff60005b83519215158352166020820152f35b73ffffffffffffffffffffffffffffffffffffffff60408092201673ffffffffffffffffffffffffffffffffffffffff600191611021565b346102295761107636611e7e565b9160ff6110866040840184612678565b9050116115345763ffffffff9161109b612ce5565b83602082015116946110b9610205549661ffff8860081c1690612d1b565b854216958691161161150a5763ffffffff60208301511663ffffffff60045460801c168082116000146115025750945b6110f560208601612cb7565b63ffffffff808816911611156114b6578063ffffffff61111760208801612cb7565b161161146b57506111288385612e1c565b9060ff8135168135036102295760408051928352813560ff16602080850191909152808301358483015291013560608301526000808052909160809060015afa1561145f576000519373ffffffffffffffffffffffffffffffffffffffff948581169561010060ff8360981c1610156104c357869060406111b26101fe8560971c166005016126c9565b20160361142e577fb9dc937c5e394d0c8f76e0e324500b88251b4c909ddc56232df10e2ea42b3c639495967fffffffffffffffff000000000000000000000000000000000000000000ffffff63ff00000077ffffffffffffffffffffffffffffffffffffffff000000008761125161125f61122f602084016126e7565b61123c6040850185612678565b60409491945194859360208501973588612d33565b03601f1981018352826120b6565b51902060201b169360801c16911617176102055563ffffffff806020840151169116811461138a575b505063ffffffff61137c60206fffffffffffffffffffffffffffffffff95866112b082612cc8565b16610206908154907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b16921617179055611304828201612cb7565b7fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff7bffffffff000000000000000000000000000000000000000000000000610205549260c01b169116176102055561136760405195606087526060870190612d74565b966113718261216b565b168286015201612188565b1660408201528033930390a3005b6113e16fffffffffffffffffffffffffffffffff6114279351166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000006004549260801b16911617600455565b8480611288565b602486604051907f56d7d2e80000000000000000000000000000000000000000000000000000000082526004820152fd5b6040513d6000823e3d90fd5b61147760208601612cb7565b6040517feea80f5200000000000000000000000000000000000000000000000000000000815263ffffffff918216600482015291166024820152604490fd5b856114c360208701612cb7565b6040517f76f4b87800000000000000000000000000000000000000000000000000000000815263ffffffff918216600482015291166024820152604490fd5b9050946110e9565b60046040517f8855b9e8000000000000000000000000000000000000000000000000000000008152fd5b604460ff6102055416604051907fce818a2400000000000000000000000000000000000000000000000000000000825260ff60048301526024820152fd5b346102295760206003193601126102295761158b6120f7565b3360005260006020526040600020541561036a5761001b90612283565b346102295760206003193601126102295761001b6115c46120f7565b612508565b3461022957600060031936011261022957602061ffff6102055460081c16604051908152f35b3461022957600060031936011261022957611608612f25565b60408051928352901515602083015290f35b34610229576000600319360112610229573360005260026020526040600020541561029e576fffffffffffffffffffffffffffffffff611658612f5b565b5116801561022957602090604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e5760206fffffffffffffffffffffffffffffffff6116ab612f5b565b5116604051908152f35b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6116e36120f7565b1660005260026020526020604060002054604051908152f35b346102295760006003193601126102295760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461022957600060031936011261022957602061053c6131eb565b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6117806120f7565b1660005260026020526020600160406000205414604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e576117c9612f5b565b6fffffffffffffffffffffffffffffffff81511680156102295763ffffffff602060409301511682519182526020820152f35b3461022957600060031936011261022957602060405160128152f35b34610229576020600319360112610229576118316120f7565b61010060ff8260981c1610156104c357806118576101fe60209360971c166005016126c9565b8051838201511715159182611873575b50506040519015158152f35b909150604073ffffffffffffffffffffffffffffffffffffffff809216922016148280611867565b506118a4611f24565b610201565b346102295760006003193601126102295760016118c681546123ab565b60009182815b6118e2575b8383526040518061045c858261211a565b825181101561196457611934816118f98493612215565b73ffffffffffffffffffffffffffffffffffffffff809254600392831b1c166000526000602052846040600020541461193a575b50506123dc565b906118cc565b61194383612215565b9054911b1c1661195c611955886123dc565b9787612438565b52868061192d565b6118d1565b34610229576000600319360112610229573360005260026020526040600020541561029e5760406fffffffffffffffffffffffffffffffff6119a9612f5b565b511681519080151582526020820152f35b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6119e86120f7565b1660005260006020526020600160406000205414604051908152f35b3461022957600319360160a081126102295760401361022957604051611a298161207e565b6004358152602435602082015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126102295760405190611a6d8261209a565b60443560ff81168103610229578252606435602083015260843560408301523360005260006020526040600020541561036a57602091611aac91612b38565b60ff60405191168152f35b611ac036611e7e565b91604082019360ff611ad28685612678565b905011611e435750611ae2612ce5565b63ffffffff8060208301511661020595611b0687549261ffff8460081c1690612d1b565b834216938491161161150a5763ffffffff92836020860151168460045460801c16808211600014611e3c57505b611b3f60208801612cb7565b858216958691161115611e3057508063ffffffff611b5f60208901612cb7565b1611611e245750611b708686612e1c565b9060ff8135168135036102295760408051928352813560ff16602080850191909152808301358483015291013560608301526000808052909160809060015afa1561145f576000519073ffffffffffffffffffffffffffffffffffffffff978883169861010060ff8560981c1610156104c35789906040611bfa6101fe8760971c166005016126c9565b201603611df3579361137c936020938897937fffffffffffffffff000000000000000000000000000000000000000000ffffff63ff00000077ffffffffffffffffffffffffffffffffffffffff000000008b611251611ca57fb9dc937c5e394d0c8f76e0e324500b88251b4c909ddc56232df10e2ea42b3c639f9d611c9063ffffffff9f8e611c8991016126e7565b9185612678565b604094919451948f9386948501973588612d33565b519020891b169360801c16911617178955858483015116908114611d95575b50506fffffffffffffffffffffffffffffffff9687611ce283612cc8565b16610206908154907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b16921617179055611d36838301612cb7565b7fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff7bffffffff00000000000000000000000000000000000000000000000083549260c01b16911617905561136760405195606087526060870190612d74565b6113e16fffffffffffffffffffffffffffffffff611dec9351166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b8880611cc4565b602489604051907f56d7d2e80000000000000000000000000000000000000000000000000000000082526004820152fd5b61147760208701612cb7565b6114c360208801612cb7565b9050611b33565b60449060ff61020554167fce818a2400000000000000000000000000000000000000000000000000000000825260ff60048301526024820152fd5b6003199182820160c0811261022957604013610229576004926044359067ffffffffffffffff8211610229576060908285030112610229577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c606091850193011261022957606490565b906003198083016060811261022957604013610229576004926044359167ffffffffffffffff8311610229578260609203011261022957820190565b503461022957611f3336611ee8565b9063ffffffff90816020611f45612f5b565b0151169260208201938084611f5987612cb7565b161115612075575082611f6b85612cb7565b814216918291161161206c575060408236031261022957611fb390610d2a604051611f958161207e565b611f9e8561216b565b8152611fa987612188565b6020820152612585565b9015612064575061202e6120286fffffffffffffffffffffffffffffffff9283611fdc82612cc8565b16600454907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b1692161717600455612cc8565b93612cb7565b90604051931683521660208201527f7045db5134e0c7ca4bff0c0e096616ef4ebb36b719cd00c5f0ba4f4475ecceee60403392a2005b602081519101fd5b61147785612cb7565b6114c385612cb7565b6040810190811067ffffffffffffffff8211176104f257604052565b6060810190811067ffffffffffffffff8211176104f257604052565b90601f601f19910116810190811067ffffffffffffffff8211176104f257604052565b6004359060ff8216820361022957565b359060ff8216820361022957565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022957565b6020908160408183019282815285518094520193019160005b828110612141575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612133565b35906fffffffffffffffffffffffffffffffff8216820361022957565b359063ffffffff8216820361022957565b67ffffffffffffffff81116104f25760051b60200190565b60405160208101907f19457468657265756d205369676e6564204d6573736167653a0a33320000000082527ff3acba882491058ea715223a1463b7d7e8610fbbb588100fb1e69a89099384a0603c820152603c815261220f8161209a565b51902090565b6001548110156104c35760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b6003548110156104c35760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b73ffffffffffffffffffffffffffffffffffffffff8091169060009082825281602052600160408320541461234a57600160408320556001546801000000000000000081101561231d576122de816001869301600155612215565b909283549160031b90811b9283911b169119161790557fe31c10b0adbedd0c6e5d024286c6eeead7761e65a67608dcf0b67604c0da7e2f3391604051a3565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff166000818152806020526040812054156123a7578060408120557f58466e5837b54e559819c9ba8a5d7c77c97c985d1aabf4bdc5f41069fa5d65a03391604051a3565b5050565b906123b582612199565b6123c260405191826120b6565b828152601f196123d28294612199565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146124095760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80518210156104c35760209160051b010190565b6000338152806020526040812054156124f75773ffffffffffffffffffffffffffffffffffffffff809216918282526002602052600160408320541461234a57600160408320556003546801000000000000000081101561231d576124b881600186930160035561224c565b909283549160031b90811b9283911b169119161790557f75d30ca40c7bcd48e685894b82b864808b9cb566090efc53444a2e61742f18a33391604051a3565b634a0bfec19052336020526024601cfd5b600090338252816020526040822054156125745773ffffffffffffffffffffffffffffffffffffffff169081815260026020526040812054156123a7578060408120557fdadd1471db1ea2f303654fb1bdcc010e5a664214ab41934c0f752aabca88a4913391604051a3565b634a0bfec18252336020526024601cfd5b602081519101517fffffffff00000000000000000000000000000000000000000000000000000000604051917fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208401947f0000000000000000000000000000000000000000000000000000000000000000865260801b16604084015260e01b166050820152603481526126198161209a565b51902060405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c815261220f8161209a565b604051906126668261209a565b60006040838281528260208201520152565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610229570180359067ffffffffffffffff82116102295760200191813603831361022957565b906040516126d68161207e565b602060018294805484520154910152565b3573ffffffffffffffffffffffffffffffffffffffff811681036102295790565b90600060206040516127198161207e565b8281520152612726612659565b506127346040820182612678565b93905060ff6102055416808503612ae957506127536040830183612678565b156104c35735916101008360f81c10156104c35761277a6101fe8460f71c166005016126c9565b92835160208501511715612ad75760019060f81c1b90612798612659565b5060208451940151604051946127ad8661209a565b855260208501526001604085015260015b60ff8116928784101561295b576127d86040840184612678565b85919510156104c3576101008186013560f81c10156104c3576128076101fe8287013560f71c166005016126c9565b9485516020870151171561293e5760018282013560f81c1b83166128ed5791600160ff94928194013560f81c1b179487805160208201516020828460408101517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f809881808099818099818099818a81808280099781898d510990820390089d8e936040848087800981808d8180856004099b8c9a089382039082030891800908910152099b09950151816002988d82039409900908840996828080888709810384820308818a800908809a5209900982039482039008900908602088015201166127be565b96509750505050509150604051927f1280090c000000000000000000000000000000000000000000000000000000006020850152602491013560f81c8184015282526129388261209a565b60009190565b9598509550505050506129569250013560f81c612c75565b600091565b50509294505091600060206040516129728161207e565b8281520152604051906129848261207e565b600082526020820160008152604086015195600096600190807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f915b612a9a57505050867ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f809260208284612a199b9c0991838382510989520151920990099052612a11602084016126e7565b9235916131fc565b15612a4c57604051906020820182811067ffffffffffffffff8211176104f2578060009160405281845236903760019190565b604051907fbd2a556b000000000000000000000000000000000000000000000000000000006020830152600482526040820182811067ffffffffffffffff8211176104f25760405260009190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183949b930492818c85098203900892909182029003806129c0565b9250509250612956915060f81c612c75565b6040517fce818a2400000000000000000000000000000000000000000000000000000000602082015260ff958616602482015294166044808601919091528452915061293890506064836120b6565b6040918282209273ffffffffffffffffffffffffffffffffffffffff91828516926020612b96612b666121b1565b84518386015195870151875192835260ff9091166020830152604082019590955260608101949094526080840190565b836000948592838052039060015afa15612c6957808251168403612c655760ff8660981c1695610100871015612c385760971c6101fe16906005820190612bdc826126c9565b8051602082015117612c235750506020866006927f2c44ddc69b8b0966ef9e8edb873b850fb2eff06ca6e2bc37c9adf3551ec39e549697985190550151910155339251a390565b92509392955050201603612c35575090565b80fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b5080fd5b509051903d90823e3d90fd5b60ff604051917fc523c75e00000000000000000000000000000000000000000000000000000000602084015216602482015260248152612cb48161209a565b90565b3563ffffffff811681036102295790565b356fffffffffffffffffffffffffffffffff811681036102295790565b60405190612cf28261207e565b610206546fffffffffffffffffffffffffffffffff8116835260801c63ffffffff166020830152565b91909163ffffffff8080941691160191821161240957565b91927fffffffffffffffffffffffffffffffffffffffff000000000000000000000000859460349693855260601b1660208401528483013701016000815290565b80358252602081013573ffffffffffffffffffffffffffffffffffffffff811680910361022957602083015260408101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156102295701906020823592019167ffffffffffffffff811161022957803603831361022957601f81601f1992608095606060408701528160608701528686013760008582860101520116010190565b9061261960887fffffffff0000000000000000000000000000000000000000000000000000000092612e596020612e5287612cc8565b9601612cb7565b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612e87602083016126e7565b91612e956040820182612678565b9384939192604051998a977fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208a019d8e7f0000000000000000000000000000000000000000000000000000000000000000905260801b1660408a015260e01b16605088015235605487015260601b1660748501528484013781016000838201520360688101845201826120b6565b3360005260026020526040600020541561029e576fffffffffffffffffffffffffffffffff612f52612f5b565b51169081151590565b60006020604051612f6b8161207e565b8281520152604051612f7c8161207e565b600454906fffffffffffffffffffffffffffffffff82168152602081019163ffffffff809160801c168352612faf612ce5565b926020840191612fcd8184511661ffff6102055460081c1690612d1b565b81804216911611159283612fef575b505050600014612fea575090565b905090565b81929350511691511610388080612fdc565b906101008110156104c35760011b806005019061301d826126c9565b908151602083015117613039575b50505050613037613091565b565b60066000918260409555015573ffffffffffffffffffffffffffffffffffffffff918291201691167f9ec05f17908406877637da36ab29c002620cb544d0049837bfa095e62726455c6000604051a33880808061302b565b303b15613037576130a0612ce5565b6020810163ffffffff906130c28282511661ffff6102055460081c1690612d1b565b828042169116118015806131d8575b613178575b61312a575b5050506000610206556004547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000004260801b16911617600455565b6fffffffffffffffffffffffffffffffff6040519351168352511660208201527f20246a67cf0cfc89415e0ea0b3293fcc5138acc3c3b2111012dd06eb742b899460403392a23880806130db565b6fffffffffffffffffffffffffffffffff845116600454907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff00000000000000000000000000000000855160801b16921617176004556130d6565b50828251168360045460801c16106130d1565b610207544781811115612fea575090565b919091811580156133b4575b6133ab57602081019283518251947ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80600781808a80098a0908908380090361339f577ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641419283861015613392577f0100000000000000000000000000000000000000000000000000000000000000604051936020850198895260f81b16604084015260418301527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b16606183015260558252608082019382851067ffffffffffffffff8611176104f257601b6000968580600160ff82613363987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff809b60209f8e6040528c519020069851978894859251160198098303961693099003875260ff166020870152604086015260608501526080840190565b84805203019060015afa1561145f5773ffffffffffffffffffffffffffffffffffffffff806000511691161490565b5050505050505050600090565b50505050505050600090565b50505050600090565b5073ffffffffffffffffffffffffffffffffffffffff84161561320856fea2646970667358221220c21b536128e7c89e0161e33fd6be525b7ae687f6dcc23404560dd0a23c9103db64736f6c63430008100033",
        "sourceMap": "562:18101:29:-:0;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;-1:-1:-1;;;;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;562:18101:29;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;562:18101:29;;;;;;;;;2980:38:1;562:18101:29;;2980:38:1;1728:9:28;;562:18101:29;;1779:10:28;;;13277:3;562:18101:29;;;;;;13277:11:28;1841:1;13277:11;;13273:104;;-1:-1:-1;14825:4:29;;;;;:::i;:::-;562:18101;;;;;;;1761:10;;14323:39;;;;14319:232;;-1:-1:-1;14319:232:29;;;;;;:::i;:::-;18244:18;562:18101;;-1:-1:-1;;1860:14:29;18244:41;;;18240:239;;-1:-1:-1;562:18101:29;;;;;;;;1779:10:28;562:18101:29;;;;;;;;;;;;;;;;18240:239;562:18101;;;;;;;;;;18306:108;18349:10;;18306:108;;562:18101;18240:239;;;;;;14319:232;562:18101;;;;;;;;;;;14383:105;14425:10;;14383:105;;-1:-1:-1;;562:18101:29;;;;14319:232;;;;;;13273:104:28;1841:1;562:18101:29;;;;;;;;13309:33:28;13320:10;;13309:33;;-1:-1:-1;;562:18101:29;;;;13273:104:28;;;;;562:18101:29;;;;-1:-1:-1;;;562:18101:29;;;;;;;;;-1:-1:-1;;;562:18101:29;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;-1:-1:-1;562:18101:29;;;;;-1:-1:-1;562:18101:29;15625:2083;15727:4;15719:25;:30;15715:43;;562:18101;;;;;;-1:-1:-1;;;;;562:18101:29;;;;;;;;;;15839:11;562:18101;;-1:-1:-1;;;;;562:18101:29;;;;;;;;;;;;;;;;;;;;16178:17;562:18101;;;;;;;;;;;;;;;-1:-1:-1;16206:15:29;;;;562:18101;;;16161:61;;;16796:53;;;15625:2083;16792:106;;15625:2083;17020:97;;15625:2083;-1:-1:-1;;;562:18101:29;;;-1:-1:-1;17662:9:29;562:18101;;-1:-1:-1;;;;562:18101:29;16206:15;562:18101;;-1:-1:-1;;;562:18101:29;;;;15625:2083::o;17020:97::-;562:18101;;;;;;;;;;;;;17065:41;562:18101;17083:10;17065:41;;17020:97;;;;;;16792:106;562:18101;;;;16865:22;562:18101;;;;;;;;;;;;;;;;;;;;16865:22;562:18101;16792:106;;16796:53;562:18101;;;;;;16836:9;562:18101;;;;-1:-1:-1;16796:53:29;;562:18101;;;;-1:-1:-1;562:18101:29;;;;;-1:-1:-1;562:18101:29;15715:43;15751:7::o",
        "linkReferences": {}
    },
    "deployedBytecode": {
        "object": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908115611ab757508060821461189b5780630760861b14611a045780630e5a6c70146115ef5780630fce3415146119ba57806310b07b7114611969578063224242ca146118a95780632f529d731461189b5780632fba4aa914611818578063313ce567146117fc578063393e5ede1461179c5780633bee58f9146117525780633ea0c15e146117375780634ca29923146116fc5780634fce7a2a146116b557806350d25bcd1461166b57806357de26a41461161a57806359e02dd7146115ef578063646edb68146115c957806365c4ce7a146115a857806365fae35e146115725780636712af9e14611068578063789d819114610fc65780638928a1f814610c145780638b0b044c14610bfb5780639954b0dc14610b465780639c52a7f114610b105780639dadc88614610a4d5780639fd001f614610a2e578063ab06ee16146109c3578063acf40b6f14610968578063b259da5c1461088f578063b9ee3fc11461086a578063bf353dbb14610823578063bfe5861f14610602578063c83c6334146105cb578063ceed3ef214610544578063d0a5882a14610521578063d63605b8146103ea578063dac42ad81461039d578063f29c29c41461037c578063fe663495146102b0578063feaf968c1461022e5763febb0f7e14610207575b3861000f565b3461022957600060031936011261022957602060ff6102055416604051908152f35b600080fd5b34610229576000600319360112610229573360005260026020526040600020541561029e5760a061025d612f5b565b63ffffffff60206fffffffffffffffffffffffffffffffff835116920151166040519160018352602083015260006040830152606082015260016080820152f35b63d957b595600052336020526024601cfd5b34610229576020600319360112610229576102c96120d9565b3360005260006020526040600020541561036a5760ff811680156102295761020591825460ff8116838103610301575b61001b613091565b6040805160ff92831681529390911660208401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009233917f95623b9931156d6d5cb43881a13f223ae416fb199e5edf776efb38766f38cbea91a21617905580808080806102f9565b634a0bfec1600052336020526024601cfd5b346102295760206003193601126102295761001b6103986120f7565b61244c565b3461022957600319604081360112610229576024359067ffffffffffffffff8211610229576060908236030112610229576103df602091600401600435612708565b506040519015158152f35b3461022957600060031936011261022957604051612020810181811067ffffffffffffffff8211176104f25760405261010090818152602061200036828401376000816040516104398161207e565b828152015260009060005b848110610460578284526040518061045c868261211a565b0390f35b8460ff821610156104c3576001906104806101fe82841b166005016126c9565b80518482015117610493575b5001610444565b9373ffffffffffffffffffffffffffffffffffffffff604084939620166104ba8288612438565b5201928661048c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3461022957600060031936011261022957602061053c6121b1565b604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e576060610573612f5b565b80516fffffffffffffffffffffffffffffffff9081169182156105b8579063ffffffff60208193015116906001935b6040519415158552166020840152166040820152f35b506000915063ffffffff908290816105a2565b34610229576020600319360112610229576105e46120d9565b3360005260006020526040600020541561036a5761001b9033613001565b346102295760406003193601126102295767ffffffffffffffff600435818111610229573660238201121561022957806004013561063f81612199565b9061064d60405192836120b6565b808252602092838301906024809360061b82010190368211610229578301915b8183106107f3575050508035938411610229573660238501121561022957836004013561069981612199565b946106a760405196876120b6565b81865284860183606080940283010191368311610229578401905b8282106107b357505050503360005260008352604060002054156107a45750805190835182036102295761070e6106f883612199565b9261070660405194856120b6565b808452612199565b92601f19818401940136853760005b825181101561075e578061074861073660019386612438565b51610741838a612438565b5190612b38565b60ff6107548388612438565b911690520161071d565b508284604051928392818401908285525180915260408401929160005b82811061078a57505050500390f35b835160ff168552869550938101939281019260010161077b565b634a0bfec1600052338352601cfd5b8382360312610229578684916040516107cb8161209a565b6107d4856120e9565b81528285013583820152604085013560408201528152019101906106c2565b6040833603126102295785604091825161080c8161207e565b85358152828601358382015281520192019161066d565b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6108516120f7565b1660005260006020526020604060002054604051908152f35b3461022957600060031936011261022957602060ff6102055460181c16604051908152f35b34610229576020806003193601126102295760043567ffffffffffffffff81116102295736602382011215610229578060040135906108cd82612199565b916108db60405193846120b6565b80835260248484019160051b8301019136831161022957602401905b828210610951578385336000526000815260406000205415610940575060005b815181101561001b578061093a60ff61093260019486612438565b511633613001565b01610917565b634a0bfec16000523390526024601cfd5b84809161095d846120e9565b8152019101906108f7565b34610229576040600319360112610229576040516109858161207e565b6004356fffffffffffffffffffffffffffffffff8116810361022957815260243563ffffffff81168103610229578161053c91602080940152612585565b34610229576020600319360112610229576004353360005260006020526040600020541561036a5761020780548281036109f957005b6040519081528260208201527ffccefdc521d919e1c7e09025203c5542ec6e99eb409c750d4fc386cdb7feee3760403392a255005b3461022957600060031936011261022957602061020754604051908152f35b346102295760206003193601126102295760043561ffff80821691828103610229573360005260006020526040600020541561036a57821561022957610205928354928360081c1691818303610aa55761001b613091565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff9262ffff009260405191825260208201527f06eaf85dccf95ffb2040720d23d296ebf45c6b193a5f373a553300fa640a111860403392a260081b16911617905580808080806102f9565b3461022957602060031936011261022957610b296120f7565b3360005260006020526040600020541561036a5761001b9061234f565b34610229576000600319360112610229576003610b6381546123ab565b9060009160005b8151811015610bea5780610b80610bbb9261224c565b9073ffffffffffffffffffffffffffffffffffffffff9182915490871b1c166000526002602052600160406000205414610bc0575b506123dc565b610b6a565b610bc98261224c565b905490861b1c16610be3610bdc876123dc565b9685612438565b5285610bb5565b8382526040518061045c848261211a565b3461022957602061053c610c0e36611ee8565b90612e1c565b3461022957602060031981813601126102295767ffffffffffffffff906004358281116102295760608160040192823603011261022957610c53612ce5565b84810163ffffffff928382511695610c77610205549761ffff8960081c1690612d1b565b8580421691161115610f9c57610c9c6044610c94602485016126e7565b930187612678565b9290610cb36040519485928c8401948b3586612d33565b0392610cc7601f19948581018352826120b6565b51902073ffffffffffffffffffffffffffffffffffffffff90811690888a1c16808203610f65575050610d2f86610d2a6fffffffffffffffffffffffffffffffff8097511660405190610d198261207e565b8152888b60c01c168c820152612585565b612708565b91909788600014610e365750505050829051168260045460801c1610610d95575b50507f3f2cf79ad39c64280638c6fc485670c10ed4dad0a35ecd2857255ee7a130ba2060405184815280610d88339487830190612d74565b0390a25b60405190158152f35b610e2e600092610de2610206938454166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b825460801c167fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000006004549260801b16911617600455565b558380610d50565b90935060ff919550610e50929796945060181c1630613001565b610e586131eb565b906000808060405185335af1903d15610f5f573d9081116104f25760405190610e888989601f84011601836120b6565b81526000883d92013e5b610f19575b5084610eae60405192604084526040840190612d74565b948286038284015283519384875260005b858110610f06575050858391600084877f2984f6d7ff4df266745fc0283d83a02c5125069524c8eeb85887de137e8f890c98999a010152601f3397011601030190a2610d8c565b8181018401518882018501528301610ebf565b7f7e4d8c9da9421f78d986605928e77f0920f2c995d1cbba819c8915d2b209aa4b60405160408152610f4e6040820185612d74565b92888201528033930390a285610e97565b50610e92565b60449250604051917f73ceee3000000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b60046040517fcff75876000000000000000000000000000000000000000000000000000000008152fd5b3461022957602060031936011261022957610fdf6120d9565b6101008110156104c357610ff89060011b6005016126c9565b805160208201511761103057506040600073ffffffffffffffffffffffffffffffffffffffff60005b83519215158352166020820152f35b73ffffffffffffffffffffffffffffffffffffffff60408092201673ffffffffffffffffffffffffffffffffffffffff600191611021565b346102295761107636611e7e565b9160ff6110866040840184612678565b9050116115345763ffffffff9161109b612ce5565b83602082015116946110b9610205549661ffff8860081c1690612d1b565b854216958691161161150a5763ffffffff60208301511663ffffffff60045460801c168082116000146115025750945b6110f560208601612cb7565b63ffffffff808816911611156114b6578063ffffffff61111760208801612cb7565b161161146b57506111288385612e1c565b9060ff8135168135036102295760408051928352813560ff16602080850191909152808301358483015291013560608301526000808052909160809060015afa1561145f576000519373ffffffffffffffffffffffffffffffffffffffff948581169561010060ff8360981c1610156104c357869060406111b26101fe8560971c166005016126c9565b20160361142e577fb9dc937c5e394d0c8f76e0e324500b88251b4c909ddc56232df10e2ea42b3c639495967fffffffffffffffff000000000000000000000000000000000000000000ffffff63ff00000077ffffffffffffffffffffffffffffffffffffffff000000008761125161125f61122f602084016126e7565b61123c6040850185612678565b60409491945194859360208501973588612d33565b03601f1981018352826120b6565b51902060201b169360801c16911617176102055563ffffffff806020840151169116811461138a575b505063ffffffff61137c60206fffffffffffffffffffffffffffffffff95866112b082612cc8565b16610206908154907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b16921617179055611304828201612cb7565b7fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff7bffffffff000000000000000000000000000000000000000000000000610205549260c01b169116176102055561136760405195606087526060870190612d74565b966113718261216b565b168286015201612188565b1660408201528033930390a3005b6113e16fffffffffffffffffffffffffffffffff6114279351166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000006004549260801b16911617600455565b8480611288565b602486604051907f56d7d2e80000000000000000000000000000000000000000000000000000000082526004820152fd5b6040513d6000823e3d90fd5b61147760208601612cb7565b6040517feea80f5200000000000000000000000000000000000000000000000000000000815263ffffffff918216600482015291166024820152604490fd5b856114c360208701612cb7565b6040517f76f4b87800000000000000000000000000000000000000000000000000000000815263ffffffff918216600482015291166024820152604490fd5b9050946110e9565b60046040517f8855b9e8000000000000000000000000000000000000000000000000000000008152fd5b604460ff6102055416604051907fce818a2400000000000000000000000000000000000000000000000000000000825260ff60048301526024820152fd5b346102295760206003193601126102295761158b6120f7565b3360005260006020526040600020541561036a5761001b90612283565b346102295760206003193601126102295761001b6115c46120f7565b612508565b3461022957600060031936011261022957602061ffff6102055460081c16604051908152f35b3461022957600060031936011261022957611608612f25565b60408051928352901515602083015290f35b34610229576000600319360112610229573360005260026020526040600020541561029e576fffffffffffffffffffffffffffffffff611658612f5b565b5116801561022957602090604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e5760206fffffffffffffffffffffffffffffffff6116ab612f5b565b5116604051908152f35b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6116e36120f7565b1660005260026020526020604060002054604051908152f35b346102295760006003193601126102295760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461022957600060031936011261022957602061053c6131eb565b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6117806120f7565b1660005260026020526020600160406000205414604051908152f35b34610229576000600319360112610229573360005260026020526040600020541561029e576117c9612f5b565b6fffffffffffffffffffffffffffffffff81511680156102295763ffffffff602060409301511682519182526020820152f35b3461022957600060031936011261022957602060405160128152f35b34610229576020600319360112610229576118316120f7565b61010060ff8260981c1610156104c357806118576101fe60209360971c166005016126c9565b8051838201511715159182611873575b50506040519015158152f35b909150604073ffffffffffffffffffffffffffffffffffffffff809216922016148280611867565b506118a4611f24565b610201565b346102295760006003193601126102295760016118c681546123ab565b60009182815b6118e2575b8383526040518061045c858261211a565b825181101561196457611934816118f98493612215565b73ffffffffffffffffffffffffffffffffffffffff809254600392831b1c166000526000602052846040600020541461193a575b50506123dc565b906118cc565b61194383612215565b9054911b1c1661195c611955886123dc565b9787612438565b52868061192d565b6118d1565b34610229576000600319360112610229573360005260026020526040600020541561029e5760406fffffffffffffffffffffffffffffffff6119a9612f5b565b511681519080151582526020820152f35b346102295760206003193601126102295773ffffffffffffffffffffffffffffffffffffffff6119e86120f7565b1660005260006020526020600160406000205414604051908152f35b3461022957600319360160a081126102295760401361022957604051611a298161207e565b6004358152602435602082015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126102295760405190611a6d8261209a565b60443560ff81168103610229578252606435602083015260843560408301523360005260006020526040600020541561036a57602091611aac91612b38565b60ff60405191168152f35b611ac036611e7e565b91604082019360ff611ad28685612678565b905011611e435750611ae2612ce5565b63ffffffff8060208301511661020595611b0687549261ffff8460081c1690612d1b565b834216938491161161150a5763ffffffff92836020860151168460045460801c16808211600014611e3c57505b611b3f60208801612cb7565b858216958691161115611e3057508063ffffffff611b5f60208901612cb7565b1611611e245750611b708686612e1c565b9060ff8135168135036102295760408051928352813560ff16602080850191909152808301358483015291013560608301526000808052909160809060015afa1561145f576000519073ffffffffffffffffffffffffffffffffffffffff978883169861010060ff8560981c1610156104c35789906040611bfa6101fe8760971c166005016126c9565b201603611df3579361137c936020938897937fffffffffffffffff000000000000000000000000000000000000000000ffffff63ff00000077ffffffffffffffffffffffffffffffffffffffff000000008b611251611ca57fb9dc937c5e394d0c8f76e0e324500b88251b4c909ddc56232df10e2ea42b3c639f9d611c9063ffffffff9f8e611c8991016126e7565b9185612678565b604094919451948f9386948501973588612d33565b519020891b169360801c16911617178955858483015116908114611d95575b50506fffffffffffffffffffffffffffffffff9687611ce283612cc8565b16610206908154907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b16921617179055611d36838301612cb7565b7fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff7bffffffff00000000000000000000000000000000000000000000000083549260c01b16911617905561136760405195606087526060870190612d74565b6113e16fffffffffffffffffffffffffffffffff611dec9351166fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff000000000000000000000000000000006004541617600455565b8880611cc4565b602489604051907f56d7d2e80000000000000000000000000000000000000000000000000000000082526004820152fd5b61147760208701612cb7565b6114c360208801612cb7565b9050611b33565b60449060ff61020554167fce818a2400000000000000000000000000000000000000000000000000000000825260ff60048301526024820152fd5b6003199182820160c0811261022957604013610229576004926044359067ffffffffffffffff8211610229576060908285030112610229577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c606091850193011261022957606490565b906003198083016060811261022957604013610229576004926044359167ffffffffffffffff8311610229578260609203011261022957820190565b503461022957611f3336611ee8565b9063ffffffff90816020611f45612f5b565b0151169260208201938084611f5987612cb7565b161115612075575082611f6b85612cb7565b814216918291161161206c575060408236031261022957611fb390610d2a604051611f958161207e565b611f9e8561216b565b8152611fa987612188565b6020820152612585565b9015612064575061202e6120286fffffffffffffffffffffffffffffffff9283611fdc82612cc8565b16600454907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff000000000000000000000000000000004260801b1692161717600455612cc8565b93612cb7565b90604051931683521660208201527f7045db5134e0c7ca4bff0c0e096616ef4ebb36b719cd00c5f0ba4f4475ecceee60403392a2005b602081519101fd5b61147785612cb7565b6114c385612cb7565b6040810190811067ffffffffffffffff8211176104f257604052565b6060810190811067ffffffffffffffff8211176104f257604052565b90601f601f19910116810190811067ffffffffffffffff8211176104f257604052565b6004359060ff8216820361022957565b359060ff8216820361022957565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022957565b6020908160408183019282815285518094520193019160005b828110612141575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101612133565b35906fffffffffffffffffffffffffffffffff8216820361022957565b359063ffffffff8216820361022957565b67ffffffffffffffff81116104f25760051b60200190565b60405160208101907f19457468657265756d205369676e6564204d6573736167653a0a33320000000082527ff3acba882491058ea715223a1463b7d7e8610fbbb588100fb1e69a89099384a0603c820152603c815261220f8161209a565b51902090565b6001548110156104c35760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b6003548110156104c35760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b73ffffffffffffffffffffffffffffffffffffffff8091169060009082825281602052600160408320541461234a57600160408320556001546801000000000000000081101561231d576122de816001869301600155612215565b909283549160031b90811b9283911b169119161790557fe31c10b0adbedd0c6e5d024286c6eeead7761e65a67608dcf0b67604c0da7e2f3391604051a3565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b505050565b73ffffffffffffffffffffffffffffffffffffffff166000818152806020526040812054156123a7578060408120557f58466e5837b54e559819c9ba8a5d7c77c97c985d1aabf4bdc5f41069fa5d65a03391604051a3565b5050565b906123b582612199565b6123c260405191826120b6565b828152601f196123d28294612199565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146124095760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80518210156104c35760209160051b010190565b6000338152806020526040812054156124f75773ffffffffffffffffffffffffffffffffffffffff809216918282526002602052600160408320541461234a57600160408320556003546801000000000000000081101561231d576124b881600186930160035561224c565b909283549160031b90811b9283911b169119161790557f75d30ca40c7bcd48e685894b82b864808b9cb566090efc53444a2e61742f18a33391604051a3565b634a0bfec19052336020526024601cfd5b600090338252816020526040822054156125745773ffffffffffffffffffffffffffffffffffffffff169081815260026020526040812054156123a7578060408120557fdadd1471db1ea2f303654fb1bdcc010e5a664214ab41934c0f752aabca88a4913391604051a3565b634a0bfec18252336020526024601cfd5b602081519101517fffffffff00000000000000000000000000000000000000000000000000000000604051917fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208401947f0000000000000000000000000000000000000000000000000000000000000000865260801b16604084015260e01b166050820152603481526126198161209a565b51902060405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c815261220f8161209a565b604051906126668261209a565b60006040838281528260208201520152565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610229570180359067ffffffffffffffff82116102295760200191813603831361022957565b906040516126d68161207e565b602060018294805484520154910152565b3573ffffffffffffffffffffffffffffffffffffffff811681036102295790565b90600060206040516127198161207e565b8281520152612726612659565b506127346040820182612678565b93905060ff6102055416808503612ae957506127536040830183612678565b156104c35735916101008360f81c10156104c35761277a6101fe8460f71c166005016126c9565b92835160208501511715612ad75760019060f81c1b90612798612659565b5060208451940151604051946127ad8661209a565b855260208501526001604085015260015b60ff8116928784101561295b576127d86040840184612678565b85919510156104c3576101008186013560f81c10156104c3576128076101fe8287013560f71c166005016126c9565b9485516020870151171561293e5760018282013560f81c1b83166128ed5791600160ff94928194013560f81c1b179487805160208201516020828460408101517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f809881808099818099818099818a81808280099781898d510990820390089d8e936040848087800981808d8180856004099b8c9a089382039082030891800908910152099b09950151816002988d82039409900908840996828080888709810384820308818a800908809a5209900982039482039008900908602088015201166127be565b96509750505050509150604051927f1280090c000000000000000000000000000000000000000000000000000000006020850152602491013560f81c8184015282526129388261209a565b60009190565b9598509550505050506129569250013560f81c612c75565b600091565b50509294505091600060206040516129728161207e565b8281520152604051906129848261207e565b600082526020820160008152604086015195600096600190807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f915b612a9a57505050867ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f809260208284612a199b9c0991838382510989520151920990099052612a11602084016126e7565b9235916131fc565b15612a4c57604051906020820182811067ffffffffffffffff8211176104f2578060009160405281845236903760019190565b604051907fbd2a556b000000000000000000000000000000000000000000000000000000006020830152600482526040820182811067ffffffffffffffff8211176104f25760405260009190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183949b930492818c85098203900892909182029003806129c0565b9250509250612956915060f81c612c75565b6040517fce818a2400000000000000000000000000000000000000000000000000000000602082015260ff958616602482015294166044808601919091528452915061293890506064836120b6565b6040918282209273ffffffffffffffffffffffffffffffffffffffff91828516926020612b96612b666121b1565b84518386015195870151875192835260ff9091166020830152604082019590955260608101949094526080840190565b836000948592838052039060015afa15612c6957808251168403612c655760ff8660981c1695610100871015612c385760971c6101fe16906005820190612bdc826126c9565b8051602082015117612c235750506020866006927f2c44ddc69b8b0966ef9e8edb873b850fb2eff06ca6e2bc37c9adf3551ec39e549697985190550151910155339251a390565b92509392955050201603612c35575090565b80fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b5080fd5b509051903d90823e3d90fd5b60ff604051917fc523c75e00000000000000000000000000000000000000000000000000000000602084015216602482015260248152612cb48161209a565b90565b3563ffffffff811681036102295790565b356fffffffffffffffffffffffffffffffff811681036102295790565b60405190612cf28261207e565b610206546fffffffffffffffffffffffffffffffff8116835260801c63ffffffff166020830152565b91909163ffffffff8080941691160191821161240957565b91927fffffffffffffffffffffffffffffffffffffffff000000000000000000000000859460349693855260601b1660208401528483013701016000815290565b80358252602081013573ffffffffffffffffffffffffffffffffffffffff811680910361022957602083015260408101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156102295701906020823592019167ffffffffffffffff811161022957803603831361022957601f81601f1992608095606060408701528160608701528686013760008582860101520116010190565b9061261960887fffffffff0000000000000000000000000000000000000000000000000000000092612e596020612e5287612cc8565b9601612cb7565b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612e87602083016126e7565b91612e956040820182612678565b9384939192604051998a977fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208a019d8e7f0000000000000000000000000000000000000000000000000000000000000000905260801b1660408a015260e01b16605088015235605487015260601b1660748501528484013781016000838201520360688101845201826120b6565b3360005260026020526040600020541561029e576fffffffffffffffffffffffffffffffff612f52612f5b565b51169081151590565b60006020604051612f6b8161207e565b8281520152604051612f7c8161207e565b600454906fffffffffffffffffffffffffffffffff82168152602081019163ffffffff809160801c168352612faf612ce5565b926020840191612fcd8184511661ffff6102055460081c1690612d1b565b81804216911611159283612fef575b505050600014612fea575090565b905090565b81929350511691511610388080612fdc565b906101008110156104c35760011b806005019061301d826126c9565b908151602083015117613039575b50505050613037613091565b565b60066000918260409555015573ffffffffffffffffffffffffffffffffffffffff918291201691167f9ec05f17908406877637da36ab29c002620cb544d0049837bfa095e62726455c6000604051a33880808061302b565b303b15613037576130a0612ce5565b6020810163ffffffff906130c28282511661ffff6102055460081c1690612d1b565b828042169116118015806131d8575b613178575b61312a575b5050506000610206556004547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff73ffffffff000000000000000000000000000000004260801b16911617600455565b6fffffffffffffffffffffffffffffffff6040519351168352511660208201527f20246a67cf0cfc89415e0ea0b3293fcc5138acc3c3b2111012dd06eb742b899460403392a23880806130db565b6fffffffffffffffffffffffffffffffff845116600454907fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffff00000000000000000000000000000000855160801b16921617176004556130d6565b50828251168360045460801c16106130d1565b610207544781811115612fea575090565b919091811580156133b4575b6133ab57602081019283518251947ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80600781808a80098a0908908380090361339f577ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641419283861015613392577f0100000000000000000000000000000000000000000000000000000000000000604051936020850198895260f81b16604084015260418301527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b16606183015260558252608082019382851067ffffffffffffffff8611176104f257601b6000968580600160ff82613363987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff809b60209f8e6040528c519020069851978894859251160198098303961693099003875260ff166020870152604086015260608501526080840190565b84805203019060015afa1561145f5773ffffffffffffffffffffffffffffffffffffffff806000511691161490565b5050505050505050600090565b50505050505050600090565b50505050600090565b5073ffffffffffffffffffffffffffffffffffffffff84161561320856fea2646970667358221220c21b536128e7c89e0161e33fd6be525b7ae687f6dcc23404560dd0a23c9103db64736f6c63430008100033",
        "sourceMap": "562:18101:29:-:0;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;2040:595:4;;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;1564:16:28;562:18101:29;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;562:18101:29;12861:18;;:::i;:::-;562:18101;2040:595:4;562:18101:29;;;;13043:12;;562:18101;;;;;12900:1;562:18101;;2040:595:4;562:18101:29;;;;;;;;;;;;12900:1;562:18101;;;;;2040:595:4;;562:18101:29;2040:595:4;;;;;;;562:18101:29;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;562:18101:29;;;13252:9:28;;562:18101:29;;13277:3:28;562:18101:29;;;;;;13277:11:28;;;13273:104;;562:18101:29;14825:4;;:::i;13273:104:28:-;562:18101:29;;;;;;;;;;;;;;;;;;;2120:602:1;;13309:33:28;;;562:18101:29;;;;13273:104:28;;;;;;;2120:602:1;;562:18101:29;2120:602:1;;562:18101:29;2120:602:1;;;;562:18101:29;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;4072:45:28;562:18101:29;;;;;;4072:45:28;:::i;:::-;562:18101:29;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;;;;;10130:3:28;562:18101:29;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;10232:6:28;562:18101:29;10240:7:28;;;;;;10608:68;;;562:18101:29;;;;10608:68:28;562:18101:29;;:::i;:::-;;;;10232:6:28;562:18101:29;;;;;;;;;;;;;;;;10273:8:28;562:18101:29;;:::i;:::-;;;3056:6:31;;;562:18101:29;3047:15:31;10306:207:28;;10232:6;562:18101:29;;10232:6:28;;10306:207;2524:97:31;;562:18101:29;2524:97:31;;;;;10395:18:28;;;;:::i;:::-;562:18101:29;;10306:207:28;;;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;857:203:28;;:::i;:::-;562:18101:29;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;562:18101:29;11683:18;;:::i;:::-;562:18101;;;;;;;11718:17;;562:18101;;11771:12;562:18101;2040:595:4;11771:12:29;;;562:18101;;11718:94;11751:4;11718:94;;562:18101;;;;;;;;2040:595:4;562:18101:29;;;;;;;;;11718:94;-1:-1:-1;562:18101:29;;-1:-1:-1;562:18101:29;;;;;11718:94;;562:18101;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;12518:6:28;2120:602:1;;12518:6:28;:::i;562:18101:29:-;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2120:602:1;;;;;562:18101:29;2120:602:1;562:18101:29;2120:602:1;;562:18101:29;;2120:602:1;;;;;562:18101:29;;;;;;11153:35:28;;562:18101:29;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;-1:-1:-1;;562:18101:29;;;;;;;;;11267:6:28;562:18101:29;;11275:18:28;;;;;11329:10;11323:32;11329:10;562:18101:29;11329:10:28;;;:::i;:::-;;11341:13;;;;:::i;:::-;;11323:32;;:::i;:::-;562:18101:29;11310:45:28;;;;:::i;:::-;562:18101:29;;;;;11267:6:28;;11275:18;;;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;;2120:602:1;;562:18101:29;2120:602:1;;;;;;562:18101:29;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;901:21;562:18101;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2120:602:1;;;562:18101:29;2120:602:1;562:18101:29;2120:602:1;;562:18101:29;;2120:602:1;;;;;12633:6:28;562:18101:29;12633:6:28;562:18101:29;;12641:18:28;;;;;12694:10;;562:18101:29;12694:10:28;562:18101:29;12694:10:28;;;:::i;:::-;562:18101:29;;2120:602:1;12694:10:28;:::i;:::-;562:18101:29;12633:6:28;;2120:602:1;;562:18101:29;2120:602:1;;;;562:18101:29;2120:602:1;;562:18101:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;562:18101:29;;;;;;;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;18244:18:29;562:18101;;18244:41;;;18240:239;;562:18101;18240:239;562:18101;;;;;;;;;;18306:108;562:18101;2120:602:1;18306:108:29;;562:18101;18240:239;562:18101;;;;;-1:-1:-1;;562:18101:29;;;;;;1482:30;562:18101;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;14284:23:29;;562:18101;;14323:17;562:18101;;;;;;;;14323:39;;;;14319:232;;;;:::i;:::-;562:18101;;;;;;;;;;;;;14383:105;562:18101;2120:602:1;14383:105:29;;562:18101;;;;;;;;14319:232;;;;;;;562:18101;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;2731:1;;;:::i;562:18101:29:-;;;;;-1:-1:-1;;562:18101:29;;;;;3837:12:4;3823:34;562:18101:29;;3823:34:4;:::i;:::-;3926:8;562:18101:29;3949:6:4;562:18101:29;3978:3:4;562:18101:29;;3957:19:4;;;;;4056:15;;3978:3;4056:15;;:::i;:::-;562:18101:29;;;;;;;;;;;;;4050:5:4;562:18101:29;;4076:1:4;562:18101:29;;;;4050:27:4;4046:99;;3978:3;;;:::i;:::-;3949:6;;4046:99;4115:15;;;:::i;:::-;562:18101:29;;;;;;;4097:33:4;4106:5;;;:::i;:::-;4097:33;;;:::i;:::-;562:18101:29;4046:99:4;;;3957:19;4245:70;;;562:18101:29;;;;3957:19:4;562:18101:29;;:::i;:::-;;;;;9683:46;562:18101;;;:::i;:::-;9683:46;;:::i;562:18101::-;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7130:14;;;562:18101;;;;;;;7130:34;7147:17;562:18101;;;;;;;7130:34;;:::i;:::-;7174:15;;;562:18101;;;7130:60;7260:24;7256:83;;7640:19;;7592:22;;;;;:::i;:::-;7640:19;;;;:::i;:::-;562:18101;;7503:178;562:18101;;7503:178;;;;;;562:18101;;;7503:178;;:::i;:::-;;;;-1:-1:-1;;7503:178:29;;;;;;;;:::i;:::-;562:18101;7472:227;;562:18101;;;;;;;;;7814:41;;;7810:139;;562:18101;;8073:184;562:18101;8110:112;562:18101;;;;;;;;;;;:::i;:::-;;;;;;;;8148:60;;;562:18101;8110:112;:::i;:::-;8073:184;:::i;:::-;8268:1125;;;;;;;;562:18101;;;;;;;;;;;;;;-1:-1:-1;8651:114:29;;8268:1125;562:18101;;8784:55;562:18101;;;;;8815:10;562:18101;8815:10;562:18101;;;;;;:::i;:::-;8784:55;;;8268:1125;562:18101;;9464:3;;562:18101;;;8651:114;562:18101;;7009:11;562:18101;7009:11;562:18101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8651:114;;;;8268:1125;562:18101;;;;;;;9056:8;562:18101;;;;;;;;9049:4;9056:8;:::i;:::-;9139:17;;:::i;:::-;562:18101;;;;;;9191:10;;18609:26;;562:18101;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;9170:135;;562:18101;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9324:58;562:18101;;;;;;;9191:10;562:18101;;;;9324:58;;;;8268:1125;;562:18101;;;;;;;;;;;;;;;;;9170:135;9236:54;562:18101;;;;;;;;;;;:::i;:::-;;;;;;9191:10;;9236:54;;;;9170:135;;;562:18101;;;;7810:139;7640:19;562:18101;;;;7878:60;;;;562:18101;7878:60;;562:18101;7592:22;562:18101;;;7878:60;7256:83;562:18101;;;7307:21;;;;562:18101;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;;;;;;;;;;;9852:8:28;562:18101:29;;:::i;:::-;;;;3056:6:31;;562:18101:29;3047:15:31;9886:95:28;;;562:18101:29;;;;9886:95:28;562:18101:29;;;;;;;;;;;;;9886:95:28;2524:97:31;562:18101:29;2524:97:31;;;;562:18101:29;;9886:95:28;;;562:18101:29;;;;;;;:::i;:::-;4183:19;562:18101;4183:19;562:18101;4183:19;;;;:::i;:::-;:44;;;4179:117;;562:18101;;;;:::i;:::-;4487:14;;;;562:18101;;;4487:34;4504:17;562:18101;;;;;;;4487:34;;:::i;:::-;4532:15;;562:18101;;;;;4487:61;4633:77;;562:18101;4487:14;;;562:18101;;;;;;;;4776:30;;;:63;:30;;;:63;;;4891:12;4487:14;4891:12;;;:::i;:::-;562:18101;;;;;;4891:19;;4887:88;;4891:12;562:18101;5035:12;4487:14;4891:12;;5035;:::i;:::-;562:18101;5035:38;5031:128;;5242:46;;;;;:::i;:::-;562:18101;;;;;;;;;;;;;;;;;;;;4487:14;562:18101;;;;;;;5327:11;;;562:18101;;;;;5352:11;;562:18101;;;;;-1:-1:-1;5219:154:29;;;4487:14;;562:18101;;;5219:154;;;;;562:18101;5219:154;562:18101;;;;;;;;;;5468:3;562:18101;;;;;;;;;;;;;;;5588:8;562:18101;;:::i;:::-;2524:97:31;;5588:38:29;5584:97;;6728:50;6005:22;;;562:18101;;;6005:22;5916:178;;6005:22;4487:14;6005:22;;;:::i;:::-;6053:19;562:18101;4183:19;;6053;;:::i;:::-;562:18101;;;;;5916:178;;;4487:14;5916:178;;562:18101;;5916:178;;:::i;:::-;;-1:-1:-1;;5916:178:29;;;;;;:::i;:::-;562:18101;5885:227;;4487:14;562:18101;;;;;;;;;;4504:17;562:18101;;4487:14;;;;562:18101;;;;6364:21;;6360:74;;4776:63;562:18101;;;;4487:14;562:18101;6527:12;;;;;:::i;:::-;562:18101;4377:11;562:18101;;;4532:15;562:18101;;4532:15;562:18101;;;;;;;;;6700:12;4891;;;6700;:::i;:::-;562:18101;;4504:17;562:18101;;;;;;;;4504:17;562:18101;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;4891:12;562:18101;:::i;:::-;;;;;;6736:10;;6728:50;;;;562:18101;6360:74;562:18101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6360:74;;;;5584:97;562:18101;;;;5649:21;;;;562:18101;5649:21;;562:18101;5649:21;5219:154;562:18101;;;;;;;;;5031:128;5110:12;4487:14;4891:12;;5110;:::i;:::-;562:18101;;5096:52;;;562:18101;;;;;5096:52;;562:18101;;;;;;;;;5096:52;4887:88;4891:12;4946;4487:14;4891:12;;4946;:::i;:::-;562:18101;;4933:31;;;562:18101;;;;;4933:31;;562:18101;;;;;;;;;5096:52;4776:63;;;;;;4633:77;562:18101;;;4680:19;;;;4179:117;562:18101;;4281:3;562:18101;;;;4250:35;;;;562:18101;;4250:35;;562:18101;;;;;4250:35;562:18101;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;2731:1;;;:::i;562:18101:29:-;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;:::i;:::-;;;;;-1:-1:-1;;562:18101:29;;;;;;;825:31;562:18101;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;12049:4;;:::i;:::-;562:18101;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;562:18101:29;10680:18;;:::i;:::-;562:18101;;10720:8;;562:18101;;2040:595:4;562:18101:29;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;;562:18101:29;13342:18;;:::i;:::-;562:18101;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;;;4449:5:4;562:18101:29;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;1098:28:28;562:18101:29;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;;;3369:5:4;562:18101:29;;;3383:1:4;562:18101:29;;;;3369:15:4;562:18101:29;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;11311:18:29;;:::i;:::-;562:18101;;;;11347:17;;562:18101;;;2040:595:4;562:18101:29;11397:12;;562:18101;;;;;;;2040:595:4;562:18101:29;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;820:2:28;562:18101:29;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;:::i;:::-;;;;9565:3:28;562:18101:29;;;;;;;;;;;;;;9615:8:28;562:18101:29;;:::i;:::-;;;3056:6:31;;;562:18101:29;3047:15:31;3046:22;9649:21:28;:50;;;;562:18101:29;;;;;;;;;;;9649:50:28;562:18101:29;;;;;;;;2524:97:31;;;9674:25:28;9649:50;;;;562:18101:29;;;;:::i;:::-;;;;;;;;-1:-1:-1;;562:18101:29;;;;;4014:13:1;4000:35;562:18101:29;;4000:35:1;:::i;:::-;562:18101:29;;;4128:6:1;4014:13;;;4123:217;4431:71;;;562:18101:29;;;;4431:71:1;562:18101:29;;:::i;4158:3:1:-;562:18101:29;;4136:20:1;;;;;4158:3;4238:16;;;;;:::i;:::-;562:18101:29;;;;;;;;;;;;;;;;;;;;4231:29:1;4227:103;;4158:3;;;;:::i;:::-;4128:6;;;4227:103;4299:16;;;:::i;:::-;562:18101:29;;;;;;4280:35:1;4290:5;;;:::i;:::-;4280:35;;;:::i;:::-;562:18101:29;4227:103:1;;;;4136:20;;;562:18101:29;;;;;-1:-1:-1;;562:18101:29;;;;;2040:595:4;562:18101:29;2040:595:4;;;;562:18101:29;;2040:595:4;;;;;562:18101:29;;10993:18;;:::i;:::-;562:18101;;;;11033:8;;;;562:18101;;2040:595:4;562:18101:29;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;:::i;:::-;;;;;;;;3554:1:1;562:18101:29;;;;3539:16:1;562:18101:29;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;2120:602:1;562:18101:29;;2120:602:1;;;;;562:18101:29;10927:24:28;;;;:::i;:::-;562:18101:29;;;;;;;;;;;;:::i;:::-;4183:19;562:18101;4183:19;;;562:18101;4183:19;;;;:::i;:::-;:44;;;4179:117;;562:18101;;;:::i;:::-;;4487:14;;;;562:18101;;4504:17;562:18101;4487:34;562:18101;;;;;;;;4487:34;;:::i;:::-;4532:15;;562:18101;;;;;4487:61;4633:77;;562:18101;4487:14;;;;;562:18101;;;;;;;;4776:30;;;:63;:30;;;:63;;4891:12;4487:14;4891:12;;;:::i;:::-;562:18101;;;;;;;4891:19;;4887:88;;4891:12;;562:18101;5035:12;4487:14;4891:12;;5035;:::i;:::-;562:18101;5035:38;5031:128;;5242:46;;;;;:::i;:::-;562:18101;;;;;;;;;;;;;;;;;;;;4487:14;562:18101;;;;;;;5327:11;;;562:18101;;;;;5352:11;;562:18101;;;;;-1:-1:-1;5219:154:29;;;4487:14;;562:18101;;;5219:154;;;;;562:18101;5219:154;562:18101;;;;;;;;;;5468:3;562:18101;;;;;;;;;;;;;;;5588:8;562:18101;;:::i;:::-;2524:97:31;;5588:38:29;5584:97;;6005:22;562:18101;6005:22;4487:14;6005:22;;;;562:18101;;;6005:22;5916:178;;6728:50;6005:22;;6053:19;562:18101;6005:22;;;;;;:::i;:::-;6053:19;;;:::i;:::-;562:18101;;;;;5916:178;;;;;;;562:18101;;5916:178;;:::i;:::-;562:18101;5885:227;;562:18101;;;;;;;;;;;;;4487:14;;;;562:18101;;6364:21;;;6360:74;;4776:63;562:18101;;;6527:12;;;;;:::i;:::-;562:18101;4377:11;562:18101;;;4532:15;562:18101;;4532:15;562:18101;;;;;;;;;6700:12;4891;;;6700;:::i;:::-;562:18101;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6360:74::-;562:18101;;;;;;;;;;;;;;;;;6360:74;;;;5584:97;562:18101;;;;5649:21;;;;562:18101;5649:21;;562:18101;5649:21;5031:128;5110:12;4487:14;4891:12;;5110;:::i;4887:88::-;4946:12;4487:14;4891:12;;4946;:::i;4776:63::-;;;;;4179:117;562:18101;;;4281:3;562:18101;;4250:35;;;562:18101;;4250:35;;562:18101;;;;;4250:35;562:18101;-1:-1:-1;;562:18101:29;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;562:18101:29;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;2144:18;;:22;:18;;:::i;:::-;:22;562:18101;;2218:12;2144:22;2218:12;;;;;;;;:::i;:::-;562:18101;2218:19;;2214:88;;2362:12;;;;;:::i;:::-;2384:15;;562:18101;;;;;2362:38;2358:128;;562:18101;;;;;;;;2661:102;562:18101;2698:30;562:18101;;;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;2144:22;562:18101;;;2698:30;:::i;2661:102::-;2777:3;;2773:46;;562:18101;3031:12;3017;562:18101;2922:12;;;;;:::i;:::-;562:18101;;;2384:15;562:18101;;2384:15;562:18101;;;;;;;;;3017:12;:::i;:::-;3031;;:::i;:::-;562:18101;;;;;;;;2144:22;562:18101;;;2999:45;562:18101;3005:10;2999:45;;562:18101;2773:46;2144:22;13515:145:28;;;;;2358:128:29;2437:12;;;:::i;2214:88::-;2273:12;;;:::i;562:18101::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;857:203:28:-;562:18101:29;;926:128:28;;;562:18101:29;;;;1004:40:28;562:18101:29;;;;;926:128:28;;;;;:::i;:::-;562:18101:29;907:153:28;;857:203;:::o;562:18101:29:-;4014:13:1;562:18101:29;;;;;;4014:13:1;-1:-1:-1;562:18101:29;;;;-1:-1:-1;562:18101:29;:::o;:::-;3837:12:4;562:18101:29;;;;;;3837:12:4;-1:-1:-1;562:18101:29;;;;-1:-1:-1;562:18101:29;:::o;3057:188:1:-;562:18101:29;;;;3112:6:1;;562:18101:29;;;;;;;3127:1:1;562:18101:29;;;;3112:16:1;3108:29;;3127:1;562:18101:29;;;;3127:1:1;562:18101:29;;;;;;;;;3127:1:1;562:18101:29;;;3127:1:1;562:18101:29;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;3210:28:1;3222:10;562:18101:29;;;3210:28:1;3057:188::o;562:18101:29:-;;;;;;;;;;3108:29:1;3130:7;;;:::o;3277:157::-;562:18101:29;;3332:6:1;562:18101:29;;;;;;;;;;3332:16:1;3328:29;;562:18101:29;;;;;3397:30:1;3411:10;562:18101:29;;;3397:30:1;3277:157::o;3328:29::-;3350:7;;:::o;562:18101:29:-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;562:18101:29;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2858:202:4:-;2120:602:1;;;;;;;;;;;;;;562:18101:29;;;;;;;;2930:5:4;2120:602:1;562:18101:29;2944:1:4;2120:602:1;562:18101:29;;;2930:15:4;2926:28;;2944:1;2120:602:1;562:18101:29;;;2988:12:4;562:18101:29;;;;;;;;;2944:1:4;562:18101:29;;;2988:12:4;562:18101:29;;:::i;:::-;;;;;;2988:12:4;562:18101:29;;;;;;;;;;;;;;;3025:28:4;2120:602:1;562:18101:29;2120:602:1;562:18101:29;3025:28:4;2858:202::o;2120:602:1:-;;;;;;;;;;3092:172:4;2120:602:1;;;;;;;;;;;;;;;562:18101:29;;;;;;3164:5:4;2120:602:1;562:18101:29;2120:602:1;562:18101:29;;;3164:15:4;3160:28;;562:18101:29;2120:602:1;562:18101:29;;;3227:30:4;2120:602:1;562:18101:29;2120:602:1;562:18101:29;3227:30:4;3092:172::o;2120:602:1:-;;;;;;;;;;3475:331:28;3761:12;562:18101:29;;3761:12:28;;562:18101:29;;;;3725:49:28;562:18101:29;3761:12:28;3725:49;;3742:3;;562:18101:29;;;;;;;;;;;;;;;;3725:49:28;;;;;;:::i;:::-;562:18101:29;3715:60:28;;562:18101:29;;3761:12:28;3629:160;;562:18101:29;;;;;;;;;3629:160:28;;;;;:::i;562:18101:29:-;;;;;;;:::i;:::-;-1:-1:-1;562:18101:29;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;4245:2706:28:-;;-1:-1:-1;562:18101:29;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;5068:19:28;562:18101:29;5068:19:28;;;;:::i;:::-;562:18101:29;;;;5123:3:28;562:18101:29;;5108:18:28;;;5104:109;;5068:19;5308;562:18101:29;5068:19:28;;5308;;:::i;:::-;562:18101:29;;;5308:22:28;562:18101:29;;;;;;;;;;;;;;;5354:8:28;562:18101:29;;:::i;:::-;;;;;3056:6:31;;562:18101:29;3047:15:31;3046:22;5417:98:28;;562:18101:29;;;;;;;;:::i;:::-;;;;;3056:6:31;;562:18101:29;;;;;;;:::i;:::-;;;;2849:43:31;;562:18101:29;;;2849:43:31;;562:18101:29;;5725:11:28;562:18101:29;;;5738:15:28;;;;;;;5823:19;562:18101:29;5068:19:28;;5823;;:::i;:::-;562:18101:29;;;;;;;;;;;5823:22:28;562:18101:29;;;;;;;;;;;5823:22:28;562:18101:29;;;5354:8:28;562:18101:29;;:::i;:::-;;;;;3056:6:31;;562:18101:29;3047:15:31;3046:22;5944:106:28;;562:18101:29;;;;5823:22:28;562:18101:29;;;6117:21:28;;6113:117;;562:18101:29;;;;;;;;5823:22:28;562:18101:29;;;6279:20:28;562:18101:29;;;;;2849:43:31;;562:18101:29;;2849:43:31;;562:18101:29;2849:43:31;;562:18101:29;996:66:31;7319:18;;;;;;;;;;;;;;;;;;;562:18101:29;;;;;7782:21:31;562:18101:29;;;7775:42:31;;7928:16;;;562:18101:29;7928:16:31;;;;;8003:18;;;;;;8010:1;8003:18;8681:17;;;;562:18101:29;;;;;;8828:22:31;8674:48;;;8815:40;2849:43;;562:18101:29;8923:17:31;8997:16;;3056:6;;562:18101:29;9579:1:31;;562:18101:29;;;;9617:20:31;;9605:37;;9598:58;9555:135;;10391:16;;;;;;;562:18101:29;;;;;10443:22:31;10312:16;;;;10431:39;562:18101:29;;;11264:17:31;11254:32;;562:18101:29;;;;;11191:26:31;;11181:41;;11310:23;562:18101:29;2849:43:31;;562:18101:29;;;5725:11:28;;6113:117;562:18101:29;;;;;;;;;;;;14301:93:28;14337:39;562:18101:29;14301:93:28;;;;562:18101:29;;5823:22:28;562:18101:29;;14301:93:28;;;562:18101:29;14301:93:28;;;;;:::i;:::-;-1:-1:-1;6163:52:28;;:::o;5944:106::-;562:18101:29;;;;;;;;;6007:27:28;562:18101:29;;;5823:22:28;562:18101:29;;6007:27:28;:::i;:::-;-1:-1:-1;;5992:43:28:o;5738:15::-;;;;;;;;-1:-1:-1;562:18101:29;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1;562:18101:29;;;;;-1:-1:-1;562:18101:29;;;2849:43:31;;562:18101:29;11972:6:31;-1:-1:-1;12004:13:31;562:18101:29;12027:11:31;;996:66;12049:1389;;;;4654:22;;;;996:66;4654:22;;562:18101:29;4654:22:31;;6653:114:28;4654:22:31;;;562:18101:29;;;;;4829:26:31;562:18101:29;;2849:43:31;562:18101:29;5023:24:31;;5008:44;;562:18101:29;;6735:22:28;562:18101:29;6735:22:28;;;:::i;:::-;562:18101:29;;6653:114:28;;:::i;:::-;6781:3;6777:81;;562:18101:29;;;;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;6917:27:28;4245:2706;:::o;6777:81::-;562:18101:29;;14530:64:28;14553:40;562:18101:29;14530:64:28;;;8010:1:31;14530:64:28;;562:18101:29;;;;;;;;;;;;;;-1:-1:-1;6800:47:28;;:::o;12049:1389:31:-;996:66;12049:1389;;;;;;;;;;;;;;;;;;;;;;;;;5417:98:28;562:18101:29;;;;;5476:27:28;562:18101:29;;;;5476:27:28;:::i;5104:109::-;562:18101:29;;13861:30:28;562:18101:29;13838:65:28;;;562:18101:29;;;;13838:65:28;;;562:18101:29;;;;;;;;;;;13838:65:28;;562:18101:29;-1:-1:-1;13838:65:28;;-1:-1:-1;562:18101:29;;13838:65:28;:::i;11478:936::-;2524:97:31;;;;;;;;;;;11775:23:28;11837:11;11752:131;11775:23;;:::i;:::-;562:18101:29;;11837:11:28;;;562:18101:29;11862:11:28;;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11752:131:28;-1:-1:-1;;11752:131:28;;;;;;;;;;;;;;;;;562:18101:29;11901:17:28;;562:18101:29;;;;11974:3:28;562:18101:29;;;;;;;;;;;;;;12025:8:28;562:18101:29;;;;;;:::i;:::-;;;11837:11:28;3056:6:31;;562:18101:29;3047:15:31;11837:11:28;;562:18101:29;;11837:11:28;562:18101:29;;;12137:28:28;562:18101:29;;;;;;;;;;;12148:10:28;562:18101:29;;12137:28:28;11478:936;:::o;12051:333::-;2524:97:31;;;;;;;;;12345:27:28;562:18101:29;;12051:333:28;11478:936;:::o;562:18101:29:-;;;;;;;;;;;;;;;;;11752:131:28;562:18101:29;;;;;;;;;;;13916:245:28;562:18101:29;;;14092:62:28;14115:30;14092:62;;;;562:18101:29;14092:62:28;;;562:18101:29;14092:62:28;;;;;;:::i;:::-;13916:245;:::o;562:18101:29:-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;4377:11;562:18101;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;562:18101:29;;;;;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;;;;;;;;;:::o;9742:638::-;;10048:283;562:18101;;9742:638;10157:12;;10119;;;:::i;:::-;10157;;;:::i;:::-;10242:22;562:18101;10242:22;10157:12;10242:22;;;:::i;:::-;10290:19;;;;;;;:::i;:::-;562:18101;;;;;10290:19;562:18101;10048:283;;;562:18101;10157:12;10048:283;;10090:3;;;562:18101;;;;;10290:19;562:18101;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;562:18101:29;;;;10048:283;;;;;;;;;:::i;2014:638:4:-;2040:595;562:18101:29;2040:595:4;;;;;562:18101:29;2040:595:4;;;;;562:18101:29;12080:18;;:::i;:::-;562:18101;;12125:8;;;;2014:638:4;:::o;13402:582:29:-;-1:-1:-1;562:18101:29;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;13552:9;562:18101;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13713:14;562:18101;13713:14;;562:18101;13713:34;562:18101;;;;;13730:17;562:18101;;;;13713:34;;:::i;:::-;13758:15;;;562:18101;;;13713:61;;13836:52;;;;13402:582;13832:146;;;;;;;13904:17;;:::o;13832:146::-;13952:15;;;:::o;13836:52::-;562:18101;;;;;;;;;-1:-1:-1;13836:52:29;;;;;14594:146;;562:18101;;;;;;;;;12910:8:28;562:18101:29;;;;;:::i;:::-;;;;3056:6:31;;;562:18101:29;3047:15:31;12936:134:28;;14594:146:29;14695:6;;;;;;:::i;:::-;14594:146::o;12936:134:28:-;562:18101:29;-1:-1:-1;562:18101:29;;2524:97:31;562:18101:29;;;;2524:97:31;;;;;;562:18101:29;;13020:39:28;-1:-1:-1;2524:97:31;562:18101:29;13020:39:28;12936:134;;;;;;15625:2083:29;15727:4;15719:25;:30;15715:43;;562:18101;;:::i;:::-;16161:14;;;562:18101;;16161:34;562:18101;;;;;16178:17;562:18101;;;;16161:34;;:::i;:::-;16206:15;;;562:18101;;;16161:61;;;16796:53;;;15625:2083;16792:106;;15625:2083;17020:97;;15625:2083;562:18101;;;15748:1;15839:11;562:18101;17662:9;562:18101;;;16206:15;562:18101;;;;;;17662:9;562:18101;15625:2083::o;17020:97::-;562:18101;;;;;;;;;;16161:14;562:18101;;;17065:41;562:18101;17083:10;17065:41;;17020:97;;;;;16792:106;562:18101;;;;16865:22;562:18101;;;;;;;;;;;;;16865:22;562:18101;16792:106;;16796:53;562:18101;;;;;;16836:9;562:18101;;;;-1:-1:-1;16796:53:29;;17797:183;17924:18;562:18101;17876:21;17914:28;;;;;;:59;17797:183;:::o;537:3004:30:-;;;;793:14;;:42;;;;537:3004;789:85;;3388:6:31;;;562:18101:29;;;;;996:66:31;;3532:26;954:1;3532:26;;;;;3517:46;;3510:62;3381:26;;;;3590:13;1129:62:30;;1185:66:31;1619:35:30;;;;;1615:78;;562:18101:29;;;1836:110:30;3388:6:31;1836:110:30;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;1836:110:30;;;562:18101:29;;;;;;;;;;;;;2723:2:30;806:1;562:18101:29;;;3944:1:31;562:18101:29;;3297:61:30;562:18101:29;3297:61:30;562:18101:29;3388:6:31;562:18101:29;;;;;;1809:151:30;;562:18101:29;;;;;;;;;3935:10:31;562:18101:29;3148:45:30;;562:18101:29;;;;2440:51:30;;562:18101:29;;;;;;;;;;;;;;;;;;;;;;;3297:61:30;;;;;;;3944:1:31;3297:61:30;;;;;562:18101:29;3297:61:30;806:1;3297:61;562:18101:29;;;3511:23:30;537:3004;:::o;1615:78::-;1670:12;;;;;;;;806:1;1670:12;:::o;1129:62::-;1168:12;;;;;;;806:1;1168:12;:::o;789:85::-;851:12;;;;806:1;851:12;:::o;793:42::-;562:18101:29;;;;811:24:30;793:42;",
        "linkReferences": {},
        "immutableReferences": {
            "43936": [
                {
                    "start": 5908,
                    "length": 32
                },
                {
                    "start": 9689,
                    "length": 32
                },
                {
                    "start": 11977,
                    "length": 32
                }
            ]
        }
    },
    "methodIdentifiers": {
        "authed()": "224242ca",
        "authed(address)": "0fce3415",
        "bar()": "febb0f7e",
        "bud(address)": "4fce7a2a",
        "challengeReward()": "3ea0c15e",
        "constructOpPokeMessage((uint128,uint32),(bytes32,address,bytes))": "8b0b044c",
        "constructPokeMessage((uint128,uint32))": "acf40b6f",
        "decimals()": "313ce567",
        "deny(address)": "9c52a7f1",
        "diss(address)": "65c4ce7a",
        "drop(uint8)": "c83c6334",
        "drop(uint8[])": "b259da5c",
        "feedRegistrationMessage()": "d0a5882a",
        "feeds()": "d63605b8",
        "feeds(address)": "2fba4aa9",
        "feeds(uint8)": "789d8191",
        "isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))": "dac42ad8",
        "kiss(address)": "f29c29c4",
        "latestAnswer()": "50d25bcd",
        "latestRoundData()": "feaf968c",
        "lift((uint256,uint256),(uint8,bytes32,bytes32))": "0760861b",
        "lift((uint256,uint256)[],(uint8,bytes32,bytes32)[])": "bfe5861f",
        "maxChallengeReward()": "9fd001f6",
        "opChallenge((bytes32,address,bytes))": "8928a1f8",
        "opChallengePeriod()": "646edb68",
        "opFeedId()": "b9ee3fc1",
        "opPoke((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))": "6712af9e",
        "opPoke_optimized_397084999((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))": "00000000",
        "peek()": "59e02dd7",
        "peep()": "0e5a6c70",
        "poke((uint128,uint32),(bytes32,address,bytes))": "2f529d73",
        "poke_optimized_7136211((uint128,uint32),(bytes32,address,bytes))": "00000082",
        "read()": "57de26a4",
        "readWithAge()": "393e5ede",
        "rely(address)": "65fae35e",
        "setBar(uint8)": "fe663495",
        "setMaxChallengeReward(uint256)": "ab06ee16",
        "setOpChallengePeriod(uint16)": "9dadc886",
        "tolled()": "9954b0dc",
        "tolled(address)": "3bee58f9",
        "tryRead()": "10b07b71",
        "tryReadWithAge()": "ceed3ef2",
        "wards(address)": "bf353dbb",
        "wat()": "4ca29923"
    },
    "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAuthed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"wat_\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberSigners\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bar\",\"type\":\"uint8\"}],\"name\":\"BarNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feedId\",\"type\":\"uint8\"}],\"name\":\"DoubleSigningAttempted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"givenAge\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"}],\"name\":\"FutureMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InChallengePeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feedId\",\"type\":\"uint8\"}],\"name\":\"InvalidFeedId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOpPokeToChallenge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotTolled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"gotHash\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"wantHash\",\"type\":\"uint160\"}],\"name\":\"SchnorrDataMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SchnorrSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerNotFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"givenAge\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentAge\",\"type\":\"uint32\"}],\"name\":\"StaleMessage\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AuthGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AuthRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldBar\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newBar\",\"type\":\"uint8\"}],\"name\":\"BarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"FeedDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"FeedLifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxChallengeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxChallengeReward\",\"type\":\"uint256\"}],\"name\":\"MaxChallengeRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldOpChallengePeriod\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newOpChallengePeriod\",\"type\":\"uint16\"}],\"name\":\"OpChallengePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"OpChallengeRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"schnorrErr\",\"type\":\"bytes\"}],\"name\":\"OpPokeChallengedSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"OpPokeChallengedUnsuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"}],\"name\":\"OpPokeDataDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opFeed\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"}],\"name\":\"OpPoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"name\":\"Poked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"TollGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"TollRenounced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"bud\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"constructOpPokeMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"}],\"name\":\"constructPokeMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"diss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"feedIds\",\"type\":\"uint8[]\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feedId\",\"type\":\"uint8\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistrationMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feedId\",\"type\":\"uint8\"}],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"isAcceptableSchnorrSignatureNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"kiss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct LibSecp256k1.Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IScribe.ECDSAData\",\"name\":\"ecdsaData\",\"type\":\"tuple\"}],\"name\":\"lift\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct LibSecp256k1.Point[]\",\"name\":\"pubKeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IScribe.ECDSAData[]\",\"name\":\"ecdsaDatas\",\"type\":\"tuple[]\"}],\"name\":\"lift\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxChallengeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"opChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opChallengePeriod\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opFeedId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IScribe.ECDSAData\",\"name\":\"ecdsaData\",\"type\":\"tuple\"}],\"name\":\"opPoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IScribe.ECDSAData\",\"name\":\"ecdsaData\",\"type\":\"tuple\"}],\"name\":\"opPoke_optimized_397084999\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"val\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"age\",\"type\":\"uint32\"}],\"internalType\":\"struct IScribe.PokeData\",\"name\":\"pokeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"signature\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"commitment\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"}],\"internalType\":\"struct IScribe.SchnorrData\",\"name\":\"schnorrData\",\"type\":\"tuple\"}],\"name\":\"poke_optimized_7136211\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readWithAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bar_\",\"type\":\"uint8\"}],\"name\":\"setBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxChallengeReward_\",\"type\":\"uint256\"}],\"name\":\"setMaxChallengeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"opChallengePeriod_\",\"type\":\"uint16\"}],\"name\":\"setOpChallengePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tolled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolled\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryRead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryReadWithAge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wat\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Chronicle Labs, Inc\",\"custom:security-contact\":\"security@chroniclelabs.org\",\"errors\":{\"BarNotReached(uint8,uint8)\":[{\"params\":{\"bar\":\"The bar security parameter.\",\"numberSigners\":\"The number of signers for given Schnorr signature.\"}}],\"DoubleSigningAttempted(uint8)\":[{\"params\":{\"feedId\":\"The id of the feed attempting to double sign.\"}}],\"FutureMessage(uint32,uint32)\":[{\"params\":{\"currentTimestamp\":\"The current time.\",\"givenAge\":\"The poked value's age.\"}}],\"InvalidFeedId(uint8)\":[{\"params\":{\"feedId\":\"The invalid feed id.\"}}],\"NotAuthorized(address)\":[{\"params\":{\"caller\":\"The caller's address.\"}}],\"NotTolled(address)\":[{\"params\":{\"caller\":\"The caller's address.\"}}],\"SchnorrDataMismatch(uint160,uint160)\":[{\"params\":{\"gotHash\":\"The truncated keccak256 hash of the SchnorrData argument.\",\"wantHash\":\"The truncated expected keccak256 hash of the SchnorrData                 argument.\"}}],\"SignerNotFeed(address)\":[{\"params\":{\"signer\":\"The ECDSA signature's signer.\"}}],\"StaleMessage(uint32,uint32)\":[{\"params\":{\"currentAge\":\"The oracle's current value's age.\",\"givenAge\":\"The poked value's age.\"}}]},\"kind\":\"dev\",\"methods\":{\"authed()\":{\"custom:invariant\":\"Only contains auth'ed addresses.                     \\u2200x \\u220a authed(): _wards[x] == 1Contains all auth'ed addresses.                     \\u2200x \\u220a Address: _wards[x] == 1 \\u2192 x \\u220a authed()\",\"details\":\"May contain duplicates.\",\"returns\":{\"_0\":\"List of addresses granted auth.\"}},\"authed(address)\":{\"params\":{\"who\":\"The address to check.\"},\"returns\":{\"_0\":\"True if `who` is auth'ed, false otherwise.\"}},\"bud(address)\":{\"params\":{\"who\":\"The address to check.\"},\"returns\":{\"_0\":\"1 if `who` is tolled, 0 otherwise.\"}},\"challengeReward()\":{\"returns\":{\"_0\":\"The ETH reward for successfully challenging an                         opPoke.\"}},\"constructOpPokeMessage((uint128,uint32),(bytes32,address,bytes))\":{\"details\":\"The message is defined as:         H(tag \\u2016 H(wat \\u2016 pokeData \\u2016 schnorrData)), where H() is the keccak256 function.\",\"params\":{\"pokeData\":\"The pokeData being optimistically poked.\",\"schnorrData\":\"The schnorrData proving `pokeData`'s integrity.\"},\"returns\":{\"_0\":\"Message to be signed for an opPoke for `pokeData`                       and `schnorrData`.\"}},\"constructPokeMessage((uint128,uint32))\":{\"details\":\"The message is defined as:         H(tag \\u2016 H(wat \\u2016 pokeData)), where H() is the keccak256 function.\",\"params\":{\"pokeData\":\"The pokeData to create the message for.\"},\"returns\":{\"_0\":\"Message for `pokeData`.\"}},\"deny(address)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"who\":\"The address to renounce auth.\"}},\"diss(address)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"who\":\"The address to renounce toll.\"}},\"drop(uint8)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"feedId\":\"The feed id to drop.\"}},\"drop(uint8[])\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"feedIds\":\"The feed ids to drop.\"}},\"feeds()\":{\"details\":\"Note that this function has a high gas consumption and is not      intended to be called onchain.\",\"returns\":{\"_0\":\"List of feed addresses.\"}},\"feeds(address)\":{\"params\":{\"who\":\"The address to check.\"},\"returns\":{\"_0\":\"True if `who` is feed, false otherwise.\"}},\"feeds(uint8)\":{\"params\":{\"feedId\":\"The feed id to check.\"},\"returns\":{\"_0\":\"True if `feedId` is a feed, false otherwise.\",\"_1\":\"Address of the feed with id `feedId` if `feedId` is a feed,              zero-address otherwise.\"}},\"isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))\":{\"details\":\"Note that a valid Schnorr signature is only acceptable if the      signature was signed by exactly bar many feeds.      For more info, see `bar()(uint8)` and `feeds()(address[])`.Note that bar and feeds are configurable, meaning a once acceptable      Schnorr signature may become unacceptable in the future.\",\"params\":{\"message\":\"The message expected to be signed via `schnorrData`.\",\"schnorrData\":\"The SchnorrData to verify whether it proves                    the `message`'s integrity.\"},\"returns\":{\"_0\":\"True if Schnorr signature is acceptable, false otherwise.\"}},\"kiss(address)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"who\":\"The address to grant toll.\"}},\"latestAnswer()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"answer The oracle's latest value.\"}},\"latestRoundData()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"answer\":\"The oracle's latest value.\",\"answeredInRound\":\"1.\",\"roundId\":\"1.\",\"startedAt\":\"0.\",\"updatedAt\":\"The timestamp of oracle's latest update.\"}},\"lift((uint256,uint256),(uint8,bytes32,bytes32))\":{\"details\":\"Only callable by auth'ed address.The message expected to be signed by `ecdsaData` is defined via      `feedRegistrationMessage()(bytes32)`.\",\"params\":{\"ecdsaData\":\"ECDSA signed message by the feed's public key.\",\"pubKey\":\"The public key of the feed.\"},\"returns\":{\"_0\":\"The id of the newly lifted feed.\"}},\"lift((uint256,uint256)[],(uint8,bytes32,bytes32)[])\":{\"details\":\"Only callable by auth'ed address.The message expected to be signed by `ecdsaDatas` is defined via      `feedRegistrationMessage()(bytes32)`.\",\"params\":{\"ecdsaDatas\":\"ECDSA signed message by the feeds' public keys.\",\"pubKeys\":\"The public keys of the feeds.\"},\"returns\":{\"_0\":\"List of feed ids of the newly lifted feeds.\"}},\"opChallenge((bytes32,address,bytes))\":{\"details\":\"If opPoke is determined to be invalid, the caller receives an ETH      bounty. The bounty is defined via the `challengeReward()(uint)`      function.If opPoke is determined to be invalid, the corresponding feed is      dropped.\",\"params\":{\"schnorrData\":\"The SchnorrData initially provided via                    opPoke.\"},\"returns\":{\"_0\":\"True if opPoke declared invalid, false otherwise.\"}},\"opPoke((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))\":{\"details\":\"Expects `pokeData`'s age to be greater than the timestamp of the      last successful poke.Expects `pokeData`'s age to not be greater than the current time.Expects `ecdsaData` to be a signature from a feed.Expects `ecdsaData` to prove the integrity of the `pokeData` and      `schnorrData`.If the `schnorrData` is proven to be invalid via the opChallenge      function, the `ecdsaData` signing feed will be dropped.\",\"params\":{\"ecdsaData\":\"The ECDSAData proving the integrity of the                  `pokeData` and `schnorrData`.\",\"pokeData\":\"The PokeData being poked.\",\"schnorrData\":\"The SchnorrData optimistically assumed to be                    proving the `pokeData`'s integrity.\"}},\"opPoke_optimized_397084999((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))\":{\"details\":\"Optimized function selector: 0x00000000.      Note that this function is _not_ defined via the IScribeOptimistic      interface and one should _not_ depend on it.\"},\"peek()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"The oracle's current value if it exists, zero otherwise.\",\"_1\":\"True if value exists, false otherwise.\"}},\"peep()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"The oracle's current value if it exists, zero otherwise.\",\"_1\":\"True if value exists, false otherwise.\"}},\"poke((uint128,uint32),(bytes32,address,bytes))\":{\"details\":\"Expects `pokeData`'s age to be greater than the timestamp of the      last successful poke.Expects `pokeData`'s age to not be greater than the current time.Expects `schnorrData` to prove `pokeData`'s integrity.      See `isAcceptableSchnorrSignatureNow(bytes32,SchnorrData)(bool)`.\",\"params\":{\"pokeData\":\"The PokeData being poked.\",\"schnorrData\":\"The SchnorrData proving the `pokeData`'s                    integrity.\"}},\"poke_optimized_7136211((uint128,uint32),(bytes32,address,bytes))\":{\"details\":\"Optimized function selector: 0x00000082.      Note that this function is _not_ defined via the IScribe interface      and one should _not_ depend on it.\"},\"read()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"The oracle's current value.\"}},\"readWithAge()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"The oracle's current value.\",\"_1\":\"The value's age.\"}},\"rely(address)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"who\":\"The address to grant auth.\"}},\"setBar(uint8)\":{\"details\":\"Only callable by auth'ed address.Reverts if `bar` is zero.\",\"params\":{\"bar\":\"The value to update bar to.\"}},\"setMaxChallengeReward(uint256)\":{\"details\":\"Only callable by auth'ed address.\",\"params\":{\"maxChallengeReward\":\"The value to update maxChallengeReward to.\"}},\"setOpChallengePeriod(uint16)\":{\"details\":\"Only callable by auth'ed address.Reverts if opChallengePeriod is zero.Note that evaluating whether an opPoke is finalized happens via the      _current_ opChallengePeriod.      This means a finalized opPoke is dropped if opChallengePeriod is      decreased to a value less than opPoke's age.\",\"params\":{\"opChallengePeriod\":\"The value to update opChallengePeriod to.\"}},\"tolled()\":{\"custom:invariant\":\"Only contains tolled addresses.                     \\u2200x \\u220a tolled(): _tolled[x]Contains all tolled addresses.                     \\u2200x \\u220a Address: _tolled[x] == 1 \\u2192 x \\u220a tolled()\",\"details\":\"May contain duplicates.\",\"returns\":{\"_0\":\"List of addresses tolled.\"}},\"tolled(address)\":{\"params\":{\"who\":\"The address to check.\"},\"returns\":{\"_0\":\"True if `who` is tolled, false otherwise.\"}},\"tryRead()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"True if value exists, false otherwise.\",\"_1\":\"The oracle's current value if it exists, zero otherwise.\"}},\"tryReadWithAge()\":{\"details\":\"Only callable by toll'ed address.\",\"returns\":{\"_0\":\"True if value exists, false otherwise.\",\"_1\":\"The oracle's current value if it exists, zero otherwise.\",\"_2\":\"The value's age if value exists, zero otherwise.\"}},\"wards(address)\":{\"params\":{\"who\":\"The address to check.\"},\"returns\":{\"_0\":\"1 if `who` is auth'ed, 0 otherwise.\"}}},\"stateVariables\":{\"_opPokeData\":{\"details\":\"opScribe's last opPoke'd value and corresponding age.\"},\"_originalOpPokeDataAge\":{\"details\":\"The age of the pokeData provided in last opPoke.      Ensures Schnorr signature can be verified after setting pokeData's      age to block.timestamp during opPoke.\"},\"_schnorrDataCommitment\":{\"details\":\"The truncated hash of the schnorrData provided in last opPoke.      Binds the opFeed to their schnorrData.\"},\"maxChallengeReward\":{\"return\":\"The maxChallengeReward parameter.\",\"returns\":{\"_0\":\"The maxChallengeReward parameter.\"}},\"opChallengePeriod\":{\"return\":\"The opChallengePeriod security parameter.\",\"returns\":{\"_0\":\"The opChallengePeriod security parameter.\"}},\"opFeedId\":{\"return\":\"Feed id of the feed last opPoke'd.\",\"returns\":{\"_0\":\"Feed id of the feed last opPoke'd.\"}}},\"title\":\"ScribeOptimistic\",\"version\":1},\"userdoc\":{\"errors\":{\"BarNotReached(uint8,uint8)\":[{\"notice\":\"Thrown if Schnorr signature not signed by exactly bar many         signers.\"}],\"DoubleSigningAttempted(uint8)\":[{\"notice\":\"Thrown if double signing attempted.\"}],\"FutureMessage(uint32,uint32)\":[{\"notice\":\"Thrown if a poked value's age is greater than the current         time.\"}],\"InChallengePeriod()\":[{\"notice\":\"Thrown if attempted to opPoke while a previous opPoke is still         in challenge period.\"}],\"InvalidFeedId(uint8)\":[{\"notice\":\"Thrown if given feed id invalid.\"}],\"NoOpPokeToChallenge()\":[{\"notice\":\"Thrown if opChallenge called while no challengeable opPoke exists.\"}],\"NotAuthorized(address)\":[{\"notice\":\"Thrown by protected function if caller not auth'ed.\"}],\"NotTolled(address)\":[{\"notice\":\"Thrown by protected function if caller not tolled.\"}],\"SchnorrDataMismatch(uint160,uint160)\":[{\"notice\":\"Thrown if opChallenge called with SchnorrData not matching         opPoke's SchnorrData.\"}],\"SchnorrSignatureInvalid()\":[{\"notice\":\"Thrown if Schnorr signature verification failed.\"}],\"SignerNotFeed(address)\":[{\"notice\":\"Thrown if opPoke called with non-feed ECDSA signature.\"}],\"StaleMessage(uint32,uint32)\":[{\"notice\":\"Thrown if a poked value's age is not greater than the oracle's         current value's age.\"}]},\"events\":{\"AuthGranted(address,address)\":{\"notice\":\"Emitted when auth granted to address.\"},\"AuthRenounced(address,address)\":{\"notice\":\"Emitted when auth renounced from address.\"},\"BarUpdated(address,uint8,uint8)\":{\"notice\":\"Emitted when bar updated.\"},\"FeedDropped(address,address)\":{\"notice\":\"Emitted when feed dropped.\"},\"FeedLifted(address,address)\":{\"notice\":\"Emitted when new feed lifted.\"},\"MaxChallengeRewardUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when maxChallengeReward updated.\"},\"OpChallengePeriodUpdated(address,uint16,uint16)\":{\"notice\":\"Emitted when length of opChallengePeriod updated.\"},\"OpChallengeRewardPaid(address,(bytes32,address,bytes),uint256)\":{\"notice\":\"Emitted when ETH reward paid for successfully challenging an         opPoke.\"},\"OpPokeChallengedSuccessfully(address,(bytes32,address,bytes),bytes)\":{\"notice\":\"Emitted when successfully challenged an opPoke.\"},\"OpPokeChallengedUnsuccessfully(address,(bytes32,address,bytes))\":{\"notice\":\"Emitted when unsuccessfully challenged an opPoke.\"},\"OpPokeDataDropped(address,(uint128,uint32))\":{\"notice\":\"Emitted when an opPoke dropped.\"},\"OpPoked(address,address,(bytes32,address,bytes),(uint128,uint32))\":{\"notice\":\"Emitted when oracles was successfully opPoked.\"},\"Poked(address,uint128,uint32)\":{\"notice\":\"Emitted when oracle was successfully poked.\"},\"TollGranted(address,address)\":{\"notice\":\"Emitted when toll granted to address.\"},\"TollRenounced(address,address)\":{\"notice\":\"Emitted when toll renounced from address.\"}},\"kind\":\"user\",\"methods\":{\"authed()\":{\"notice\":\"Returns full list of addresses granted auth.\"},\"authed(address)\":{\"notice\":\"Returns whether address `who` is auth'ed.\"},\"bar()\":{\"notice\":\"Returns the bar security parameter.\"},\"bud(address)\":{\"notice\":\"Returns whether address `who` is tolled.\"},\"challengeReward()\":{\"notice\":\"Returns the ETH rewards being paid for successfully challenging         an opPoke.\"},\"constructOpPokeMessage((uint128,uint32),(bytes32,address,bytes))\":{\"notice\":\"Returns the message expected to be signed via ECDSA for calling         opPoke.\"},\"constructPokeMessage((uint128,uint32))\":{\"notice\":\"Returns the message expected to be signed via Schnorr for         `pokeData`.\"},\"decimals()\":{\"notice\":\"Returns the number of decimals of the oracle's value.\"},\"deny(address)\":{\"notice\":\"Renounces address `who`'s auth.\"},\"diss(address)\":{\"notice\":\"Renounces address `who`'s toll.\"},\"drop(uint8)\":{\"notice\":\"Drops feed with id `feedId`.\"},\"drop(uint8[])\":{\"notice\":\"Drops feeds with ids' `feedIds`.\"},\"feedRegistrationMessage()\":{\"notice\":\"Returns the feed registration message.\"},\"feeds()\":{\"notice\":\"Returns list of feed addresses.\"},\"feeds(address)\":{\"notice\":\"Returns whether address `who` is a feed.\"},\"feeds(uint8)\":{\"notice\":\"Returns whether feed id `feedId` is a feed and, if so, the         feed's address.\"},\"isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))\":{\"notice\":\"Returns whether the Schnorr signature `schnorrData` is         currently acceptable for message `message`.\"},\"kiss(address)\":{\"notice\":\"Grants address `who` toll.\"},\"latestAnswer()\":{\"notice\":\"Returns the oracle's latest value.\"},\"latestRoundData()\":{\"notice\":\"Returns the oracle's latest value.\"},\"lift((uint256,uint256),(uint8,bytes32,bytes32))\":{\"notice\":\"Lifts public key `pubKey` to being a feed.\"},\"lift((uint256,uint256)[],(uint8,bytes32,bytes32)[])\":{\"notice\":\"Lifts public keys `pubKeys` to being feeds.\"},\"maxChallengeReward()\":{\"notice\":\"Returns the maxChallengeRewards parameter.\"},\"opChallenge((bytes32,address,bytes))\":{\"notice\":\"Challenges the current challengeable opPoke.\"},\"opChallengePeriod()\":{\"notice\":\"Returns the opChallengePeriod security parameter.\"},\"opFeedId()\":{\"notice\":\"Returns the feed id of the feed last opPoke'd.\"},\"opPoke((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))\":{\"notice\":\"Optimistically pokes the oracle.\"},\"peek()\":{\"notice\":\"Returns the oracle's current value.\"},\"peep()\":{\"notice\":\"Returns the oracle's current value.\"},\"poke((uint128,uint32),(bytes32,address,bytes))\":{\"notice\":\"Pokes the oracle.\"},\"read()\":{\"notice\":\"Returns the oracle's current value.\"},\"readWithAge()\":{\"notice\":\"Returns the oracle's current value and its age.\"},\"rely(address)\":{\"notice\":\"Grants address `who` auth.\"},\"setBar(uint8)\":{\"notice\":\"Updates the bar security parameters to `bar`.\"},\"setMaxChallengeReward(uint256)\":{\"notice\":\"Updates the maxChallengeReward parameter.\"},\"setOpChallengePeriod(uint16)\":{\"notice\":\"Updates the opChallengePeriod security parameter.\"},\"tolled()\":{\"notice\":\"Returns full list of addresses tolled.\"},\"tolled(address)\":{\"notice\":\"Returns whether address `who` is tolled.\"},\"tryRead()\":{\"notice\":\"Returns the oracle's current value.\"},\"tryReadWithAge()\":{\"notice\":\"Returns the oracle's current value and its age.\"},\"wards(address)\":{\"notice\":\"Returns whether address `who` is auth'ed.\"},\"wat()\":{\"notice\":\"Returns the oracle's identifier.\"}},\"notice\":\"Scribe based optimistic Oracle with onchain fault resolution\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ScribeOptimistic.sol\":\"ScribeOptimistic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":chronicle-std/=lib/chronicle-std/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\"lib/chronicle-std:ds-test/=lib/chronicle-std/lib/forge-std/lib/ds-test/src/\",\"lib/chronicle-std:forge-std/=lib/chronicle-std/lib/forge-std/src/\",\"lib/chronicle-std:src/=lib/chronicle-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chronicle-std/src/IChronicle.sol\":{\"keccak256\":\"0x12c7c1ed4f56cc317ef6faa03c3a8a04a5227f473c18f3a9a3c59becaf1fafca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92655a68ffa472078a2a8d44205abcbecdff23a918e9b06b4a136f46eaedc418\",\"dweb:/ipfs/QmP3Etq6HaAULg6X3GLjuhggGvzMiqfa3sn5LDXrqFiNjX\"]},\"lib/chronicle-std/src/auth/Auth.sol\":{\"keccak256\":\"0x634eb69385999f28623b15a04424a12be66bc2b848c70f5217557bd1ffd20766\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32680625804f064660cfe2b94fa9a0bd625b3fad5902cf1b074415760c72c55a\",\"dweb:/ipfs/QmQtCDsrArnqWNs4C41zssxyRMc1UYSW3FL96Gdmxs38CG\"]},\"lib/chronicle-std/src/auth/IAuth.sol\":{\"keccak256\":\"0x67e2920d75dc7c394f899fbb7d07e298f96059e8ae5bb3340fb6a5bf2a35624f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b0e308256c1e2a29f4fccef062475abac367cb973d77df21fd4903f58cb5a731\",\"dweb:/ipfs/QmTipAgzavbPErRXWSGeb1tmKXB36zQUL4SAWJz5MYZwsP\"]},\"lib/chronicle-std/src/toll/IToll.sol\":{\"keccak256\":\"0x138157bd72dcd67d9d6ac30ab9f43575730b18bc0a537eeb7799508fd2fa4df1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f6aabad886cb76dca534fb50225f19dc02e42f3e254eddde9610af463adfc96\",\"dweb:/ipfs/QmawqX98Pg6YdXWpWGfosrZmtMYp9FFE5LXKhWftRjbonA\"]},\"lib/chronicle-std/src/toll/Toll.sol\":{\"keccak256\":\"0xbca48a68e702db0186c43df67bd74915df76bcc30ebc4f3d22d7449fd0963b41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41662b21eeab923c0cd05bcdfcbc87d957b1cbc66e81f9c1db6f9f4541ebc542\",\"dweb:/ipfs/QmQqFDKURMZMYtatLLWPKbSugxNmz2MjxSF9dRaaqq5XJX\"]},\"src/IScribe.sol\":{\"keccak256\":\"0x766d3a5dfc4937f30db89151e68d01b9b26585bbfb399aa3f50b58bdfb9c1d5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81b821f53f4745ec704a4d52cc2bf325f27636b85fb66520dd3988ca1860e8e1\",\"dweb:/ipfs/QmQSBoGib9rbBStwJNenU8PjAzai7Zo3c7uCKMXY41eLpj\"]},\"src/IScribeOptimistic.sol\":{\"keccak256\":\"0xe6d69b8fe380c32811e30615994ecc6cf99b705626b63156021a8e86845bf64f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d10b5515f8b492d843fdd7f525fc74ecfca4e1051028bfc92c40ee737dc84e99\",\"dweb:/ipfs/QmXqmPHLBRaowi9xppLUtPKZUgHeuW1Jc7iDG4b83jAsgr\"]},\"src/Scribe.sol\":{\"keccak256\":\"0xb0c7b1b6a9e5bde23b4f3b3445a3b4959b3c3f98f38033fc3bb73985716b91f7\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://13adde6bcaa51ebd8494e6b36e00846429d93180c824d8c895f5f2a3b57cac1a\",\"dweb:/ipfs/Qmf2BfWM5VJ4JJLCCCfBM2wG4t5PtMRgyUhjnegBD1fXwz\"]},\"src/ScribeOptimistic.sol\":{\"keccak256\":\"0x2673daf5c1381e72760acf5a548ed6a84ea669da22b479e83ed9af5e2f29fd6d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4fcc2b0fc471827fa7cd7e82ff75708ff9361e3f162a9b66305ad8a8fca7e6e0\",\"dweb:/ipfs/QmW5D4A4MdvmgWCeefc7swCdJRnF4BMecEMbaxSTVgPfUN\"]},\"src/libs/LibSchnorr.sol\":{\"keccak256\":\"0xe0a3cc7cbeef80e86318a0f89dff4b05fb303a83fd43634a6ffd35df088fc838\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f101a3c215ab131fc2a8c35f4d83ff42e8f39a995243760f762d280d171dc4d8\",\"dweb:/ipfs/QmRgoTZeZmnVbvzrHA6vAYDwDHiRQ4Et9nf4NZZeVau4J1\"]},\"src/libs/LibSecp256k1.sol\":{\"keccak256\":\"0x32c5d7f655e8493823a413e1579fdf05dcbc2f9bcaa0dc3da47e269006311245\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://150478306872245cbc9496f1eddf100ae3da3a628fef7a0ad9008e4296a30ba1\",\"dweb:/ipfs/QmYao4oaCihTkmdaSUj82BEDus9ZsEg7ZrTgGFr7H9DtzD\"]}},\"version\":1}",
    "metadata": {
        "compiler": {
            "version": "0.8.16+commit.07a7930e"
        },
        "language": "Solidity",
        "output": {
            "abi": [
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "initialAuthed",
                            "type": "address"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "wat_",
                            "type": "bytes32"
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "constructor"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "numberSigners",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint8",
                            "name": "bar",
                            "type": "uint8"
                        }
                    ],
                    "type": "error",
                    "name": "BarNotReached"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "feedId",
                            "type": "uint8"
                        }
                    ],
                    "type": "error",
                    "name": "DoubleSigningAttempted"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint32",
                            "name": "givenAge",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32",
                            "name": "currentTimestamp",
                            "type": "uint32"
                        }
                    ],
                    "type": "error",
                    "name": "FutureMessage"
                },
                {
                    "inputs": [],
                    "type": "error",
                    "name": "InChallengePeriod"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "feedId",
                            "type": "uint8"
                        }
                    ],
                    "type": "error",
                    "name": "InvalidFeedId"
                },
                {
                    "inputs": [],
                    "type": "error",
                    "name": "NoOpPokeToChallenge"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "NotAuthorized"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "NotTolled"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint160",
                            "name": "gotHash",
                            "type": "uint160"
                        },
                        {
                            "internalType": "uint160",
                            "name": "wantHash",
                            "type": "uint160"
                        }
                    ],
                    "type": "error",
                    "name": "SchnorrDataMismatch"
                },
                {
                    "inputs": [],
                    "type": "error",
                    "name": "SchnorrSignatureInvalid"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "signer",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "SignerNotFeed"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint32",
                            "name": "givenAge",
                            "type": "uint32"
                        },
                        {
                            "internalType": "uint32",
                            "name": "currentAge",
                            "type": "uint32"
                        }
                    ],
                    "type": "error",
                    "name": "StaleMessage"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "AuthGranted",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "AuthRenounced",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint8",
                            "name": "oldBar",
                            "type": "uint8",
                            "indexed": false
                        },
                        {
                            "internalType": "uint8",
                            "name": "newBar",
                            "type": "uint8",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "BarUpdated",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "feed",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "FeedDropped",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "feed",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "FeedLifted",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint256",
                            "name": "oldMaxChallengeReward",
                            "type": "uint256",
                            "indexed": false
                        },
                        {
                            "internalType": "uint256",
                            "name": "newMaxChallengeReward",
                            "type": "uint256",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "MaxChallengeRewardUpdated",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint16",
                            "name": "oldOpChallengePeriod",
                            "type": "uint16",
                            "indexed": false
                        },
                        {
                            "internalType": "uint16",
                            "name": "newOpChallengePeriod",
                            "type": "uint16",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpChallengePeriodUpdated",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "challenger",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ],
                            "indexed": false
                        },
                        {
                            "internalType": "uint256",
                            "name": "reward",
                            "type": "uint256",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpChallengeRewardPaid",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ],
                            "indexed": false
                        },
                        {
                            "internalType": "bytes",
                            "name": "schnorrErr",
                            "type": "bytes",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpPokeChallengedSuccessfully",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpPokeChallengedUnsuccessfully",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpPokeDataDropped",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "opFeed",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ],
                            "indexed": false
                        },
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ],
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "OpPoked",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint128",
                            "name": "val",
                            "type": "uint128",
                            "indexed": false
                        },
                        {
                            "internalType": "uint32",
                            "name": "age",
                            "type": "uint32",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "Poked",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "TollGranted",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "caller",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "TollRenounced",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "authed",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "authed",
                    "outputs": [
                        {
                            "internalType": "address[]",
                            "name": "",
                            "type": "address[]"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "bar",
                    "outputs": [
                        {
                            "internalType": "uint8",
                            "name": "",
                            "type": "uint8"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "bud",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "challengeReward",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "constructOpPokeMessage",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "constructPokeMessage",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "decimals",
                    "outputs": [
                        {
                            "internalType": "uint8",
                            "name": "",
                            "type": "uint8"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "deny"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "diss"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8[]",
                            "name": "feedIds",
                            "type": "uint8[]"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "drop"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "feedId",
                            "type": "uint8"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "drop"
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "feedRegistrationMessage",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "feeds",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "feedId",
                            "type": "uint8"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "feeds",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        },
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "feeds",
                    "outputs": [
                        {
                            "internalType": "address[]",
                            "name": "",
                            "type": "address[]"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "message",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "isAcceptableSchnorrSignatureNow",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "kiss"
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "latestAnswer",
                    "outputs": [
                        {
                            "internalType": "int256",
                            "name": "",
                            "type": "int256"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "latestRoundData",
                    "outputs": [
                        {
                            "internalType": "uint80",
                            "name": "roundId",
                            "type": "uint80"
                        },
                        {
                            "internalType": "int256",
                            "name": "answer",
                            "type": "int256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "startedAt",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "updatedAt",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint80",
                            "name": "answeredInRound",
                            "type": "uint80"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct LibSecp256k1.Point",
                            "name": "pubKey",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "x",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "y",
                                    "type": "uint256"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.ECDSAData",
                            "name": "ecdsaData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint8",
                                    "name": "v",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "r",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "s",
                                    "type": "bytes32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "lift",
                    "outputs": [
                        {
                            "internalType": "uint8",
                            "name": "",
                            "type": "uint8"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct LibSecp256k1.Point[]",
                            "name": "pubKeys",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "x",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "y",
                                    "type": "uint256"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.ECDSAData[]",
                            "name": "ecdsaDatas",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "uint8",
                                    "name": "v",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "r",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "s",
                                    "type": "bytes32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "lift",
                    "outputs": [
                        {
                            "internalType": "uint8[]",
                            "name": "",
                            "type": "uint8[]"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "maxChallengeReward",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "opChallenge",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "opChallengePeriod",
                    "outputs": [
                        {
                            "internalType": "uint16",
                            "name": "",
                            "type": "uint16"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "opFeedId",
                    "outputs": [
                        {
                            "internalType": "uint8",
                            "name": "",
                            "type": "uint8"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.ECDSAData",
                            "name": "ecdsaData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint8",
                                    "name": "v",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "r",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "s",
                                    "type": "bytes32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "opPoke"
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.ECDSAData",
                            "name": "ecdsaData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint8",
                                    "name": "v",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "r",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "bytes32",
                                    "name": "s",
                                    "type": "bytes32"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "function",
                    "name": "opPoke_optimized_397084999"
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "peek",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "peep",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "poke"
                },
                {
                    "inputs": [
                        {
                            "internalType": "struct IScribe.PokeData",
                            "name": "pokeData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "val",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint32",
                                    "name": "age",
                                    "type": "uint32"
                                }
                            ]
                        },
                        {
                            "internalType": "struct IScribe.SchnorrData",
                            "name": "schnorrData",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "bytes32",
                                    "name": "signature",
                                    "type": "bytes32"
                                },
                                {
                                    "internalType": "address",
                                    "name": "commitment",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "feedIds",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "poke_optimized_7136211"
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "read",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "readWithAge",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "rely"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "bar_",
                            "type": "uint8"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setBar"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "maxChallengeReward_",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setMaxChallengeReward"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint16",
                            "name": "opChallengePeriod_",
                            "type": "uint16"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setOpChallengePeriod"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "tolled",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "tolled",
                    "outputs": [
                        {
                            "internalType": "address[]",
                            "name": "",
                            "type": "address[]"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "tryRead",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "tryReadWithAge",
                    "outputs": [
                        {
                            "internalType": "bool",
                            "name": "",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "who",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "wards",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "wat",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "payable",
                    "type": "receive"
                }
            ],
            "devdoc": {
                "kind": "dev",
                "methods": {
                    "authed()": {
                        "custom:invariant": "Only contains auth'ed addresses.                     ∀x ∊ authed(): _wards[x] == 1Contains all auth'ed addresses.                     ∀x ∊ Address: _wards[x] == 1 → x ∊ authed()",
                        "details": "May contain duplicates.",
                        "returns": {
                            "_0": "List of addresses granted auth."
                        }
                    },
                    "authed(address)": {
                        "params": {
                            "who": "The address to check."
                        },
                        "returns": {
                            "_0": "True if `who` is auth'ed, false otherwise."
                        }
                    },
                    "bud(address)": {
                        "params": {
                            "who": "The address to check."
                        },
                        "returns": {
                            "_0": "1 if `who` is tolled, 0 otherwise."
                        }
                    },
                    "challengeReward()": {
                        "returns": {
                            "_0": "The ETH reward for successfully challenging an                         opPoke."
                        }
                    },
                    "constructOpPokeMessage((uint128,uint32),(bytes32,address,bytes))": {
                        "details": "The message is defined as:         H(tag ‖ H(wat ‖ pokeData ‖ schnorrData)), where H() is the keccak256 function.",
                        "params": {
                            "pokeData": "The pokeData being optimistically poked.",
                            "schnorrData": "The schnorrData proving `pokeData`'s integrity."
                        },
                        "returns": {
                            "_0": "Message to be signed for an opPoke for `pokeData`                       and `schnorrData`."
                        }
                    },
                    "constructPokeMessage((uint128,uint32))": {
                        "details": "The message is defined as:         H(tag ‖ H(wat ‖ pokeData)), where H() is the keccak256 function.",
                        "params": {
                            "pokeData": "The pokeData to create the message for."
                        },
                        "returns": {
                            "_0": "Message for `pokeData`."
                        }
                    },
                    "deny(address)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "who": "The address to renounce auth."
                        }
                    },
                    "diss(address)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "who": "The address to renounce toll."
                        }
                    },
                    "drop(uint8)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "feedId": "The feed id to drop."
                        }
                    },
                    "drop(uint8[])": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "feedIds": "The feed ids to drop."
                        }
                    },
                    "feeds()": {
                        "details": "Note that this function has a high gas consumption and is not      intended to be called onchain.",
                        "returns": {
                            "_0": "List of feed addresses."
                        }
                    },
                    "feeds(address)": {
                        "params": {
                            "who": "The address to check."
                        },
                        "returns": {
                            "_0": "True if `who` is feed, false otherwise."
                        }
                    },
                    "feeds(uint8)": {
                        "params": {
                            "feedId": "The feed id to check."
                        },
                        "returns": {
                            "_0": "True if `feedId` is a feed, false otherwise.",
                            "_1": "Address of the feed with id `feedId` if `feedId` is a feed,              zero-address otherwise."
                        }
                    },
                    "isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))": {
                        "details": "Note that a valid Schnorr signature is only acceptable if the      signature was signed by exactly bar many feeds.      For more info, see `bar()(uint8)` and `feeds()(address[])`.Note that bar and feeds are configurable, meaning a once acceptable      Schnorr signature may become unacceptable in the future.",
                        "params": {
                            "message": "The message expected to be signed via `schnorrData`.",
                            "schnorrData": "The SchnorrData to verify whether it proves                    the `message`'s integrity."
                        },
                        "returns": {
                            "_0": "True if Schnorr signature is acceptable, false otherwise."
                        }
                    },
                    "kiss(address)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "who": "The address to grant toll."
                        }
                    },
                    "latestAnswer()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "answer The oracle's latest value."
                        }
                    },
                    "latestRoundData()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "answer": "The oracle's latest value.",
                            "answeredInRound": "1.",
                            "roundId": "1.",
                            "startedAt": "0.",
                            "updatedAt": "The timestamp of oracle's latest update."
                        }
                    },
                    "lift((uint256,uint256),(uint8,bytes32,bytes32))": {
                        "details": "Only callable by auth'ed address.The message expected to be signed by `ecdsaData` is defined via      `feedRegistrationMessage()(bytes32)`.",
                        "params": {
                            "ecdsaData": "ECDSA signed message by the feed's public key.",
                            "pubKey": "The public key of the feed."
                        },
                        "returns": {
                            "_0": "The id of the newly lifted feed."
                        }
                    },
                    "lift((uint256,uint256)[],(uint8,bytes32,bytes32)[])": {
                        "details": "Only callable by auth'ed address.The message expected to be signed by `ecdsaDatas` is defined via      `feedRegistrationMessage()(bytes32)`.",
                        "params": {
                            "ecdsaDatas": "ECDSA signed message by the feeds' public keys.",
                            "pubKeys": "The public keys of the feeds."
                        },
                        "returns": {
                            "_0": "List of feed ids of the newly lifted feeds."
                        }
                    },
                    "opChallenge((bytes32,address,bytes))": {
                        "details": "If opPoke is determined to be invalid, the caller receives an ETH      bounty. The bounty is defined via the `challengeReward()(uint)`      function.If opPoke is determined to be invalid, the corresponding feed is      dropped.",
                        "params": {
                            "schnorrData": "The SchnorrData initially provided via                    opPoke."
                        },
                        "returns": {
                            "_0": "True if opPoke declared invalid, false otherwise."
                        }
                    },
                    "opPoke((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))": {
                        "details": "Expects `pokeData`'s age to be greater than the timestamp of the      last successful poke.Expects `pokeData`'s age to not be greater than the current time.Expects `ecdsaData` to be a signature from a feed.Expects `ecdsaData` to prove the integrity of the `pokeData` and      `schnorrData`.If the `schnorrData` is proven to be invalid via the opChallenge      function, the `ecdsaData` signing feed will be dropped.",
                        "params": {
                            "ecdsaData": "The ECDSAData proving the integrity of the                  `pokeData` and `schnorrData`.",
                            "pokeData": "The PokeData being poked.",
                            "schnorrData": "The SchnorrData optimistically assumed to be                    proving the `pokeData`'s integrity."
                        }
                    },
                    "opPoke_optimized_397084999((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))": {
                        "details": "Optimized function selector: 0x00000000.      Note that this function is _not_ defined via the IScribeOptimistic      interface and one should _not_ depend on it."
                    },
                    "peek()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "The oracle's current value if it exists, zero otherwise.",
                            "_1": "True if value exists, false otherwise."
                        }
                    },
                    "peep()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "The oracle's current value if it exists, zero otherwise.",
                            "_1": "True if value exists, false otherwise."
                        }
                    },
                    "poke((uint128,uint32),(bytes32,address,bytes))": {
                        "details": "Expects `pokeData`'s age to be greater than the timestamp of the      last successful poke.Expects `pokeData`'s age to not be greater than the current time.Expects `schnorrData` to prove `pokeData`'s integrity.      See `isAcceptableSchnorrSignatureNow(bytes32,SchnorrData)(bool)`.",
                        "params": {
                            "pokeData": "The PokeData being poked.",
                            "schnorrData": "The SchnorrData proving the `pokeData`'s                    integrity."
                        }
                    },
                    "poke_optimized_7136211((uint128,uint32),(bytes32,address,bytes))": {
                        "details": "Optimized function selector: 0x00000082.      Note that this function is _not_ defined via the IScribe interface      and one should _not_ depend on it."
                    },
                    "read()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "The oracle's current value."
                        }
                    },
                    "readWithAge()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "The oracle's current value.",
                            "_1": "The value's age."
                        }
                    },
                    "rely(address)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "who": "The address to grant auth."
                        }
                    },
                    "setBar(uint8)": {
                        "details": "Only callable by auth'ed address.Reverts if `bar` is zero.",
                        "params": {
                            "bar": "The value to update bar to."
                        }
                    },
                    "setMaxChallengeReward(uint256)": {
                        "details": "Only callable by auth'ed address.",
                        "params": {
                            "maxChallengeReward": "The value to update maxChallengeReward to."
                        }
                    },
                    "setOpChallengePeriod(uint16)": {
                        "details": "Only callable by auth'ed address.Reverts if opChallengePeriod is zero.Note that evaluating whether an opPoke is finalized happens via the      _current_ opChallengePeriod.      This means a finalized opPoke is dropped if opChallengePeriod is      decreased to a value less than opPoke's age.",
                        "params": {
                            "opChallengePeriod": "The value to update opChallengePeriod to."
                        }
                    },
                    "tolled()": {
                        "custom:invariant": "Only contains tolled addresses.                     ∀x ∊ tolled(): _tolled[x]Contains all tolled addresses.                     ∀x ∊ Address: _tolled[x] == 1 → x ∊ tolled()",
                        "details": "May contain duplicates.",
                        "returns": {
                            "_0": "List of addresses tolled."
                        }
                    },
                    "tolled(address)": {
                        "params": {
                            "who": "The address to check."
                        },
                        "returns": {
                            "_0": "True if `who` is tolled, false otherwise."
                        }
                    },
                    "tryRead()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "True if value exists, false otherwise.",
                            "_1": "The oracle's current value if it exists, zero otherwise."
                        }
                    },
                    "tryReadWithAge()": {
                        "details": "Only callable by toll'ed address.",
                        "returns": {
                            "_0": "True if value exists, false otherwise.",
                            "_1": "The oracle's current value if it exists, zero otherwise.",
                            "_2": "The value's age if value exists, zero otherwise."
                        }
                    },
                    "wards(address)": {
                        "params": {
                            "who": "The address to check."
                        },
                        "returns": {
                            "_0": "1 if `who` is auth'ed, 0 otherwise."
                        }
                    }
                },
                "version": 1
            },
            "userdoc": {
                "kind": "user",
                "methods": {
                    "authed()": {
                        "notice": "Returns full list of addresses granted auth."
                    },
                    "authed(address)": {
                        "notice": "Returns whether address `who` is auth'ed."
                    },
                    "bar()": {
                        "notice": "Returns the bar security parameter."
                    },
                    "bud(address)": {
                        "notice": "Returns whether address `who` is tolled."
                    },
                    "challengeReward()": {
                        "notice": "Returns the ETH rewards being paid for successfully challenging         an opPoke."
                    },
                    "constructOpPokeMessage((uint128,uint32),(bytes32,address,bytes))": {
                        "notice": "Returns the message expected to be signed via ECDSA for calling         opPoke."
                    },
                    "constructPokeMessage((uint128,uint32))": {
                        "notice": "Returns the message expected to be signed via Schnorr for         `pokeData`."
                    },
                    "decimals()": {
                        "notice": "Returns the number of decimals of the oracle's value."
                    },
                    "deny(address)": {
                        "notice": "Renounces address `who`'s auth."
                    },
                    "diss(address)": {
                        "notice": "Renounces address `who`'s toll."
                    },
                    "drop(uint8)": {
                        "notice": "Drops feed with id `feedId`."
                    },
                    "drop(uint8[])": {
                        "notice": "Drops feeds with ids' `feedIds`."
                    },
                    "feedRegistrationMessage()": {
                        "notice": "Returns the feed registration message."
                    },
                    "feeds()": {
                        "notice": "Returns list of feed addresses."
                    },
                    "feeds(address)": {
                        "notice": "Returns whether address `who` is a feed."
                    },
                    "feeds(uint8)": {
                        "notice": "Returns whether feed id `feedId` is a feed and, if so, the         feed's address."
                    },
                    "isAcceptableSchnorrSignatureNow(bytes32,(bytes32,address,bytes))": {
                        "notice": "Returns whether the Schnorr signature `schnorrData` is         currently acceptable for message `message`."
                    },
                    "kiss(address)": {
                        "notice": "Grants address `who` toll."
                    },
                    "latestAnswer()": {
                        "notice": "Returns the oracle's latest value."
                    },
                    "latestRoundData()": {
                        "notice": "Returns the oracle's latest value."
                    },
                    "lift((uint256,uint256),(uint8,bytes32,bytes32))": {
                        "notice": "Lifts public key `pubKey` to being a feed."
                    },
                    "lift((uint256,uint256)[],(uint8,bytes32,bytes32)[])": {
                        "notice": "Lifts public keys `pubKeys` to being feeds."
                    },
                    "maxChallengeReward()": {
                        "notice": "Returns the maxChallengeRewards parameter."
                    },
                    "opChallenge((bytes32,address,bytes))": {
                        "notice": "Challenges the current challengeable opPoke."
                    },
                    "opChallengePeriod()": {
                        "notice": "Returns the opChallengePeriod security parameter."
                    },
                    "opFeedId()": {
                        "notice": "Returns the feed id of the feed last opPoke'd."
                    },
                    "opPoke((uint128,uint32),(bytes32,address,bytes),(uint8,bytes32,bytes32))": {
                        "notice": "Optimistically pokes the oracle."
                    },
                    "peek()": {
                        "notice": "Returns the oracle's current value."
                    },
                    "peep()": {
                        "notice": "Returns the oracle's current value."
                    },
                    "poke((uint128,uint32),(bytes32,address,bytes))": {
                        "notice": "Pokes the oracle."
                    },
                    "read()": {
                        "notice": "Returns the oracle's current value."
                    },
                    "readWithAge()": {
                        "notice": "Returns the oracle's current value and its age."
                    },
                    "rely(address)": {
                        "notice": "Grants address `who` auth."
                    },
                    "setBar(uint8)": {
                        "notice": "Updates the bar security parameters to `bar`."
                    },
                    "setMaxChallengeReward(uint256)": {
                        "notice": "Updates the maxChallengeReward parameter."
                    },
                    "setOpChallengePeriod(uint16)": {
                        "notice": "Updates the opChallengePeriod security parameter."
                    },
                    "tolled()": {
                        "notice": "Returns full list of addresses tolled."
                    },
                    "tolled(address)": {
                        "notice": "Returns whether address `who` is tolled."
                    },
                    "tryRead()": {
                        "notice": "Returns the oracle's current value."
                    },
                    "tryReadWithAge()": {
                        "notice": "Returns the oracle's current value and its age."
                    },
                    "wards(address)": {
                        "notice": "Returns whether address `who` is auth'ed."
                    },
                    "wat()": {
                        "notice": "Returns the oracle's identifier."
                    }
                },
                "version": 1
            }
        },
        "settings": {
            "remappings": [
                "chronicle-std/=lib/chronicle-std/src/",
                "ds-test/=lib/forge-std/lib/ds-test/src/",
                "forge-std/=lib/forge-std/src/",
                "lib/chronicle-std:ds-test/=lib/chronicle-std/lib/forge-std/lib/ds-test/src/",
                "lib/chronicle-std:forge-std/=lib/chronicle-std/lib/forge-std/src/",
                "lib/chronicle-std:src/=lib/chronicle-std/src/"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 10000
            },
            "metadata": {
                "bytecodeHash": "ipfs"
            },
            "compilationTarget": {
                "src/ScribeOptimistic.sol": "ScribeOptimistic"
            },
            "evmVersion": "london",
            "libraries": {},
            "viaIR": true
        },
        "sources": {
            "lib/chronicle-std/src/IChronicle.sol": {
                "keccak256": "0x12c7c1ed4f56cc317ef6faa03c3a8a04a5227f473c18f3a9a3c59becaf1fafca",
                "urls": [
                    "bzz-raw://92655a68ffa472078a2a8d44205abcbecdff23a918e9b06b4a136f46eaedc418",
                    "dweb:/ipfs/QmP3Etq6HaAULg6X3GLjuhggGvzMiqfa3sn5LDXrqFiNjX"
                ],
                "license": "MIT"
            },
            "lib/chronicle-std/src/auth/Auth.sol": {
                "keccak256": "0x634eb69385999f28623b15a04424a12be66bc2b848c70f5217557bd1ffd20766",
                "urls": [
                    "bzz-raw://32680625804f064660cfe2b94fa9a0bd625b3fad5902cf1b074415760c72c55a",
                    "dweb:/ipfs/QmQtCDsrArnqWNs4C41zssxyRMc1UYSW3FL96Gdmxs38CG"
                ],
                "license": "MIT"
            },
            "lib/chronicle-std/src/auth/IAuth.sol": {
                "keccak256": "0x67e2920d75dc7c394f899fbb7d07e298f96059e8ae5bb3340fb6a5bf2a35624f",
                "urls": [
                    "bzz-raw://b0e308256c1e2a29f4fccef062475abac367cb973d77df21fd4903f58cb5a731",
                    "dweb:/ipfs/QmTipAgzavbPErRXWSGeb1tmKXB36zQUL4SAWJz5MYZwsP"
                ],
                "license": "MIT"
            },
            "lib/chronicle-std/src/toll/IToll.sol": {
                "keccak256": "0x138157bd72dcd67d9d6ac30ab9f43575730b18bc0a537eeb7799508fd2fa4df1",
                "urls": [
                    "bzz-raw://2f6aabad886cb76dca534fb50225f19dc02e42f3e254eddde9610af463adfc96",
                    "dweb:/ipfs/QmawqX98Pg6YdXWpWGfosrZmtMYp9FFE5LXKhWftRjbonA"
                ],
                "license": "MIT"
            },
            "lib/chronicle-std/src/toll/Toll.sol": {
                "keccak256": "0xbca48a68e702db0186c43df67bd74915df76bcc30ebc4f3d22d7449fd0963b41",
                "urls": [
                    "bzz-raw://41662b21eeab923c0cd05bcdfcbc87d957b1cbc66e81f9c1db6f9f4541ebc542",
                    "dweb:/ipfs/QmQqFDKURMZMYtatLLWPKbSugxNmz2MjxSF9dRaaqq5XJX"
                ],
                "license": "MIT"
            },
            "src/IScribe.sol": {
                "keccak256": "0x766d3a5dfc4937f30db89151e68d01b9b26585bbfb399aa3f50b58bdfb9c1d5a",
                "urls": [
                    "bzz-raw://81b821f53f4745ec704a4d52cc2bf325f27636b85fb66520dd3988ca1860e8e1",
                    "dweb:/ipfs/QmQSBoGib9rbBStwJNenU8PjAzai7Zo3c7uCKMXY41eLpj"
                ],
                "license": "MIT"
            },
            "src/IScribeOptimistic.sol": {
                "keccak256": "0xe6d69b8fe380c32811e30615994ecc6cf99b705626b63156021a8e86845bf64f",
                "urls": [
                    "bzz-raw://d10b5515f8b492d843fdd7f525fc74ecfca4e1051028bfc92c40ee737dc84e99",
                    "dweb:/ipfs/QmXqmPHLBRaowi9xppLUtPKZUgHeuW1Jc7iDG4b83jAsgr"
                ],
                "license": "MIT"
            },
            "src/Scribe.sol": {
                "keccak256": "0xb0c7b1b6a9e5bde23b4f3b3445a3b4959b3c3f98f38033fc3bb73985716b91f7",
                "urls": [
                    "bzz-raw://13adde6bcaa51ebd8494e6b36e00846429d93180c824d8c895f5f2a3b57cac1a",
                    "dweb:/ipfs/Qmf2BfWM5VJ4JJLCCCfBM2wG4t5PtMRgyUhjnegBD1fXwz"
                ],
                "license": "BUSL-1.1"
            },
            "src/ScribeOptimistic.sol": {
                "keccak256": "0x2673daf5c1381e72760acf5a548ed6a84ea669da22b479e83ed9af5e2f29fd6d",
                "urls": [
                    "bzz-raw://4fcc2b0fc471827fa7cd7e82ff75708ff9361e3f162a9b66305ad8a8fca7e6e0",
                    "dweb:/ipfs/QmW5D4A4MdvmgWCeefc7swCdJRnF4BMecEMbaxSTVgPfUN"
                ],
                "license": "BUSL-1.1"
            },
            "src/libs/LibSchnorr.sol": {
                "keccak256": "0xe0a3cc7cbeef80e86318a0f89dff4b05fb303a83fd43634a6ffd35df088fc838",
                "urls": [
                    "bzz-raw://f101a3c215ab131fc2a8c35f4d83ff42e8f39a995243760f762d280d171dc4d8",
                    "dweb:/ipfs/QmRgoTZeZmnVbvzrHA6vAYDwDHiRQ4Et9nf4NZZeVau4J1"
                ],
                "license": "MIT"
            },
            "src/libs/LibSecp256k1.sol": {
                "keccak256": "0x32c5d7f655e8493823a413e1579fdf05dcbc2f9bcaa0dc3da47e269006311245",
                "urls": [
                    "bzz-raw://150478306872245cbc9496f1eddf100ae3da3a628fef7a0ad9008e4296a30ba1",
                    "dweb:/ipfs/QmYao4oaCihTkmdaSUj82BEDus9ZsEg7ZrTgGFr7H9DtzD"
                ],
                "license": "MIT"
            }
        },
        "version": 1
    },
    "id": 29
}
